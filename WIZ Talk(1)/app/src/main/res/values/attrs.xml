<?xml version="1.0" encoding="utf-8"?>
<resources>

    <!-- Defines the custom XML attributes supported for a HorizontalListView -->
    <declare-styleable name="HorizontalListView">
        <attr name="dividerWidth" format="dimension" />
        <attr name="android:divider" />
        <attr name="android:requiresFadingEdge" />
        <attr name="android:fadingEdgeLength" />
    </declare-styleable>
    <declare-styleable name="ProgressButtonAttrs">
        <attr name="text_size" format="dimension" />
        <attr name="text_color" format="color" />
        <attr name="progress_color" format="color" />
        <attr name="max_progress" format="integer" />
        <attr name="curr_progress" format="integer" />
    </declare-styleable>

    <declare-styleable name="CircleIndicator">
        <attr name="ci_radius" format="dimension" />
        <attr name="ci_margin" format="dimension" />
        <attr name="ci_background" format="color|integer" />
        <attr name="ci_selected_background" format="color|integer" />
        <attr name="ci_gravity">
            <enum name="left" value="0" />
            <enum name="center" value="1" />
            <enum name="right" value="2" />
        </attr>
        <attr name="ci_mode">
            <enum name="inside" value="0" />
            <enum name="outside" value="1" />
            <enum name="solo" value="2" />
        </attr>
    </declare-styleable>
    <declare-styleable name="RoundProgress">
        <attr name="roundColor" format="color" />
        <attr name="roundProgressColor" format="color" />
        <attr name="roundWidth" format="dimension"></attr>
        <attr name="progressTextColor" format="color" />
        <attr name="progressTextSize" format="dimension" />
        <attr name="max" format="integer"></attr>
        <attr name="textIsDisplayable" format="boolean"></attr>
        <attr name="style">
            <enum name="STROKE" value="0"></enum>
            <enum name="FILL" value="1"></enum>
        </attr>
    </declare-styleable>

    <declare-styleable name="PullToRefresh">

        <!-- A drawable to use as the background of the Refreshable View -->
        <attr name="ptrRefreshableViewBackground" format="reference|color" />

        <!-- A drawable to use as the background of the Header and Footer Loading Views -->
        <attr name="ptrHeaderBackground" format="reference|color" />

        <!-- Text Color of the Header and Footer Loading Views -->
        <attr name="ptrHeaderTextColor" format="reference|color" />

        <!-- Text Color of the Header and Footer Loading Views Sub Header -->
        <attr name="ptrHeaderSubTextColor" format="reference|color" />

        <!-- Mode of Pull-to-Refresh that should be used -->
        <attr name="ptrMode">
            <flag name="disabled" value="0x0" />
            <flag name="pullFromStart" value="0x1" />
            <flag name="pullFromEnd" value="0x2" />
            <flag name="both" value="0x3" />
            <flag name="manualOnly" value="0x4" />

            <!-- These last two are depreacted -->
            <flag name="pullDownFromTop" value="0x1" />
            <flag name="pullUpFromBottom" value="0x2" />
        </attr>

        <!-- Whether the Indicator overlay(s) should be used -->
        <attr name="ptrShowIndicator" format="reference|boolean" />

        <!-- Drawable to use as Loading Indicator. Changes both Header and Footer. -->
        <attr name="ptrDrawable" format="reference" />

        <!-- Drawable to use as Loading Indicator in the Header View. Overrides value set in ptrDrawable. -->
        <attr name="ptrDrawableStart" format="reference" />

        <!-- Drawable to use as Loading Indicator in the Footer View. Overrides value set in ptrDrawable. -->
        <attr name="ptrDrawableEnd" format="reference" />

        <!-- Whether Android's built-in Over Scroll should be utilised for Pull-to-Refresh. -->
        <attr name="ptrOverScroll" format="reference|boolean" />

        <!-- Base text color, typeface, size, and style for Header and Footer Loading Views -->
        <attr name="ptrHeaderTextAppearance" format="reference" />

        <!-- Base text color, typeface, size, and style for Header and Footer Loading Views Sub Header -->
        <attr name="ptrSubHeaderTextAppearance" format="reference" />

        <!-- Style of Animation should be used displayed when pulling. -->
        <attr name="ptrAnimationStyle">
            <flag name="rotate" value="0x0" />
            <flag name="flip" value="0x1" />
        </attr>

        <!-- Whether the user can scroll while the View is Refreshing -->
        <attr name="ptrScrollingWhileRefreshingEnabled" format="reference|boolean" />

        <!--
        	Whether PullToRefreshListView has it's extras enabled. This allows the user to be
        	able to scroll while refreshing, and behaves better. It acheives this by adding
        	Header and/or Footer Views to the ListView.
        -->
        <attr name="ptrListViewExtrasEnabled" format="reference|boolean" />

        <!--
        	Whether the Drawable should be continually rotated as you pull. This only
        	takes effect when using the 'Rotate' Animation Style.
        -->
        <attr name="ptrRotateDrawableWhilePulling" format="reference|boolean" />

        <!-- BELOW HERE ARE DEPRECEATED. DO NOT USE. -->
        <attr name="ptrAdapterViewBackground" format="reference|color" />
        <attr name="ptrDrawableTop" format="reference" />
        <attr name="ptrDrawableBottom" format="reference" />
    </declare-styleable>


    <declare-styleable name="MovieRecorderView">
        <!-- 开始是否打开摄像头 -->
        <attr name="is_open_camera" format="boolean" />
        <!-- 一次拍摄最长时间 -->
        <attr name="record_max_time" format="integer"/>
        <!-- 视频分辨率宽度 -->
        <attr name="record_width" format="integer"/>
        <!-- 视频分辨率高度 -->
        <attr name="record_height" format="integer"/>
    </declare-styleable>



    <declare-styleable name="scaleStyle">
        <attr name="scalableType">
            <enum name="none" value="0"/>

            <enum name="fitXY" value="1"/>
            <enum name="fitStart" value="2"/>
            <enum name="fitCenter" value="3"/>
            <enum name="fitEnd" value="4"/>

            <enum name="leftTop" value="5"/>
            <enum name="leftCenter" value="6"/>
            <enum name="leftBottom" value="7"/>
            <enum name="centerTop" value="8"/>
            <enum name="center" value="9"/>
            <enum name="centerBottom" value="10"/>
            <enum name="rightTop" value="11"/>
            <enum name="rightCenter" value="12"/>
            <enum name="rightBottom" value="13"/>

            <enum name="leftTopCrop" value="14"/>
            <enum name="leftCenterCrop" value="15"/>
            <enum name="leftBottomCrop" value="16"/>
            <enum name="centerTopCrop" value="17"/>
            <enum name="centerCrop" value="18"/>
            <enum name="centerBottomCrop" value="19"/>
            <enum name="rightTopCrop" value="20"/>
            <enum name="rightCenterCrop" value="21"/>
            <enum name="rightBottomCrop" value="22"/>

            <enum name="startInside" value="23"/>
            <enum name="centerInside" value="24"/>
            <enum name="endInside" value="25"/>
        </attr>
    </declare-styleable>

</resources>