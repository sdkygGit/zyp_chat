package com.wiz.dev.wiztalk.DB;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table XMPP_MESSAGE.
 */
public class XmppMessageDao extends AbstractDao<XmppMessage, Long> {

    public static final String TABLENAME = "XMPP_MESSAGE";

    /**
     * Properties of entity XmppMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sid = new Property(1, String.class, "sid", false, "SID");
        public final static Property To_ = new Property(2, String.class, "to_", false, "TO_");
        public final static Property From_ = new Property(3, String.class, "from_", false, "FROM_");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Body = new Property(5, String.class, "body", false, "BODY");
        public final static Property Direct = new Property(6, int.class, "direct", false, "DIRECT");
        public final static Property CreateTime = new Property(7, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property Mold = new Property(8, Integer.class, "mold", false, "MOLD");
        public final static Property VoiceLength = new Property(9, Integer.class, "voiceLength", false, "VOICE_LENGTH");
        public final static Property FilePath = new Property(10, String.class, "filePath", false, "FILE_PATH");
        public final static Property Status = new Property(11, Integer.class, "status", false, "STATUS");
        public final static Property ReadStatus = new Property(12, Integer.class, "readStatus", false, "READ_STATUS");
        public final static Property ExtLocalUserName = new Property(13, String.class, "extLocalUserName", false, "EXT_LOCAL_USER_NAME");
        public final static Property ExtRemoteUserName = new Property(14, String.class, "extRemoteUserName", false, "EXT_REMOTE_USER_NAME");
        public final static Property ExtLocalDisplayName = new Property(15, String.class, "extLocalDisplayName", false, "EXT_LOCAL_DISPLAY_NAME");
        public final static Property ExtRemoteDisplayName = new Property(16, String.class, "extRemoteDisplayName", false, "EXT_REMOTE_DISPLAY_NAME");
        public final static Property ExtGroupOperateType = new Property(17, Integer.class, "extGroupOperateType", false, "EXT_GROUP_OPERATE_TYPE");
        public final static Property ExtGroupOperateIsdeal = new Property(18, Integer.class, "extGroupOperateIsdeal", false, "EXT_GROUP_OPERATE_ISDEAL");
        public final static Property ExtGroupOperateUserName = new Property(19, String.class, "extGroupOperateUserName", false, "EXT_GROUP_OPERATE_USER_NAME");
        public final static Property ExtGroupOperateUserNick = new Property(20, String.class, "extGroupOperateUserNick", false, "EXT_GROUP_OPERATE_USER_NICK");
        public final static Property ExtGroupMemberUserName = new Property(21, String.class, "extGroupMemberUserName", false, "EXT_GROUP_MEMBER_USER_NAME");
        public final static Property ExtGroupMemberUserNick = new Property(22, String.class, "extGroupMemberUserNick", false, "EXT_GROUP_MEMBER_USER_NICK");
        public final static Property ExtInternalFilePath = new Property(23, String.class, "extInternalFilePath", false, "EXT_INTERNAL_FILE_PATH");
        public final static Property PushToken = new Property(24, String.class, "pushToken", false, "PUSH_TOKEN");
        public final static Property PushContent = new Property(25, String.class, "pushContent", false, "PUSH_CONTENT");
        public final static Property PushMsgType = new Property(26, Integer.class, "pushMsgType", false, "PUSH_MSG_TYPE");
        public final static Property PushStatusId = new Property(27, String.class, "pushStatusId", false, "PUSH_STATUS_ID");
        public final static Property PushtoUserNames = new Property(28, String.class, "pushtoUserNames", false, "PUSHTO_USER_NAMES");
        public final static Property PushObjectContentBody = new Property(29, String.class, "pushObjectContentBody", false, "PUSH_OBJECT_CONTENT_BODY");
        public final static Property PushObjectContentAppId = new Property(30, String.class, "pushObjectContentAppId", false, "PUSH_OBJECT_CONTENT_APP_ID");
        public final static Property PushObjectContentOperations = new Property(31, String.class, "pushObjectContentOperations", false, "PUSH_OBJECT_CONTENT_OPERATIONS");
        public final static Property PushObjectContentPubTime = new Property(32, Long.class, "pushObjectContentPubTime", false, "PUSH_OBJECT_CONTENT_PUB_TIME");
        public final static Property PushSessions = new Property(33, String.class, "pushSessions", false, "PUSH_SESSIONS");
        public final static Property Pushexpire = new Property(34, Long.class, "pushexpire", false, "PUSHEXPIRE");
        public final static Property ToReadStatus = new Property(35, Integer.class, "toReadStatus", false, "TO_READ_STATUS");
        public final static Property ShowTime = new Property(36, Long.class, "showTime", false, "SHOW_TIME");
        public final static Property RecVoiceReadStatus = new Property(37, Integer.class, "recVoiceReadStatus", false, "REC_VOICE_READ_STATUS");
    }

    ;


    public XmppMessageDao(DaoConfig config) {
        super(config);
    }

    public XmppMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'XMPP_MESSAGE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'SID' TEXT," + // 1: sid
                "'TO_' TEXT NOT NULL ," + // 2: to_
                "'FROM_' TEXT NOT NULL ," + // 3: from_
                "'TYPE' TEXT," + // 4: type
                "'BODY' TEXT," + // 5: body
                "'DIRECT' INTEGER NOT NULL ," + // 6: direct
                "'CREATE_TIME' INTEGER," + // 7: createTime
                "'MOLD' INTEGER," + // 8: mold
                "'VOICE_LENGTH' INTEGER," + // 9: voiceLength
                "'FILE_PATH' TEXT," + // 10: filePath
                "'STATUS' INTEGER," + // 11: status
                "'READ_STATUS' INTEGER," + // 12: readStatus
                "'EXT_LOCAL_USER_NAME' TEXT," + // 13: extLocalUserName
                "'EXT_REMOTE_USER_NAME' TEXT," + // 14: extRemoteUserName
                "'EXT_LOCAL_DISPLAY_NAME' TEXT," + // 15: extLocalDisplayName
                "'EXT_REMOTE_DISPLAY_NAME' TEXT," + // 16: extRemoteDisplayName
                "'EXT_GROUP_OPERATE_TYPE' INTEGER," + // 17: extGroupOperateType
                "'EXT_GROUP_OPERATE_ISDEAL' INTEGER," + // 18: extGroupOperateIsdeal
                "'EXT_GROUP_OPERATE_USER_NAME' TEXT," + // 19: extGroupOperateUserName
                "'EXT_GROUP_OPERATE_USER_NICK' TEXT," + // 20: extGroupOperateUserNick
                "'EXT_GROUP_MEMBER_USER_NAME' TEXT," + // 21: extGroupMemberUserName
                "'EXT_GROUP_MEMBER_USER_NICK' TEXT," + // 22: extGroupMemberUserNick
                "'EXT_INTERNAL_FILE_PATH' TEXT," + // 23: extInternalFilePath
                "'PUSH_TOKEN' TEXT," + // 24: pushToken
                "'PUSH_CONTENT' TEXT," + // 25: pushContent
                "'PUSH_MSG_TYPE' INTEGER," + // 26: pushMsgType
                "'PUSH_STATUS_ID' TEXT," + // 27: pushStatusId
                "'PUSHTO_USER_NAMES' TEXT," + // 28: pushtoUserNames
                "'PUSH_OBJECT_CONTENT_BODY' TEXT," + // 29: pushObjectContentBody
                "'PUSH_OBJECT_CONTENT_APP_ID' TEXT," + // 30: pushObjectContentAppId
                "'PUSH_OBJECT_CONTENT_OPERATIONS' TEXT," + // 31: pushObjectContentOperations
                "'PUSH_OBJECT_CONTENT_PUB_TIME' INTEGER," + // 32: pushObjectContentPubTime
                "'PUSH_SESSIONS' TEXT," + // 33: pushSessions
                "'PUSHEXPIRE' INTEGER," +
                "'TO_READ_STATUS' INTEGER," +
                "'SHOW_TIME' INTEGER," +
                "'REC_VOICE_READ_STATUS' INTEGER)"); //
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'XMPP_MESSAGE'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, XmppMessage entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String sid = entity.getSid();
        if (sid != null) {
            stmt.bindString(2, sid);
        }
        stmt.bindString(3, entity.getTo_());
        stmt.bindString(4, entity.getFrom_());

        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }

        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(6, body);
        }
        stmt.bindLong(7, entity.getDirect());

        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(8, createTime);
        }

        Integer mold = entity.getMold();
        if (mold != null) {
            stmt.bindLong(9, mold);
        }

        Integer voiceLength = entity.getVoiceLength();
        if (voiceLength != null) {
            stmt.bindLong(10, voiceLength);
        }

        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(11, filePath);
        }

        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(12, status);
        }

        Integer readStatus = entity.getReadStatus();
        if (readStatus != null) {
            stmt.bindLong(13, readStatus);
        }

        String extLocalUserName = entity.getExtLocalUserName();
        if (extLocalUserName != null) {
            stmt.bindString(14, extLocalUserName);
        }

        String extRemoteUserName = entity.getExtRemoteUserName();
        if (extRemoteUserName != null) {
            stmt.bindString(15, extRemoteUserName);
        }

        String extLocalDisplayName = entity.getExtLocalDisplayName();
        if (extLocalDisplayName != null) {
            stmt.bindString(16, extLocalDisplayName);
        }

        String extRemoteDisplayName = entity.getExtRemoteDisplayName();
        if (extRemoteDisplayName != null) {
            stmt.bindString(17, extRemoteDisplayName);
        }

        Integer extGroupOperateType = entity.getExtGroupOperateType();
        if (extGroupOperateType != null) {
            stmt.bindLong(18, extGroupOperateType);
        }

        Integer extGroupOperateIsdeal = entity.getExtGroupOperateIsdeal();
        if (extGroupOperateIsdeal != null) {
            stmt.bindLong(19, extGroupOperateIsdeal);
        }

        String extGroupOperateUserName = entity.getExtGroupOperateUserName();
        if (extGroupOperateUserName != null) {
            stmt.bindString(20, extGroupOperateUserName);
        }

        String extGroupOperateUserNick = entity.getExtGroupOperateUserNick();
        if (extGroupOperateUserNick != null) {
            stmt.bindString(21, extGroupOperateUserNick);
        }

        String extGroupMemberUserName = entity.getExtGroupMemberUserName();
        if (extGroupMemberUserName != null) {
            stmt.bindString(22, extGroupMemberUserName);
        }

        String extGroupMemberUserNick = entity.getExtGroupMemberUserNick();
        if (extGroupMemberUserNick != null) {
            stmt.bindString(23, extGroupMemberUserNick);
        }

        String extInternalFilePath = entity.getExtInternalFilePath();
        if (extInternalFilePath != null) {
            stmt.bindString(24, extInternalFilePath);
        }

        String pushToken = entity.getPushToken();
        if (pushToken != null) {
            stmt.bindString(25, pushToken);
        }

        String pushContent = entity.getPushContent();
        if (pushContent != null) {
            stmt.bindString(26, pushContent);
        }

        Integer pushMsgType = entity.getPushMsgType();
        if (pushMsgType != null) {
            stmt.bindLong(27, pushMsgType);
        }

        String pushStatusId = entity.getPushStatusId();
        if (pushStatusId != null) {
            stmt.bindString(28, pushStatusId);
        }

        String pushtoUserNames = entity.getPushtoUserNames();
        if (pushtoUserNames != null) {
            stmt.bindString(29, pushtoUserNames);
        }

        String pushObjectContentBody = entity.getPushObjectContentBody();
        if (pushObjectContentBody != null) {
            stmt.bindString(30, pushObjectContentBody);
        }

        String pushObjectContentAppId = entity.getPushObjectContentAppId();
        if (pushObjectContentAppId != null) {
            stmt.bindString(31, pushObjectContentAppId);
        }

        String pushObjectContentOperations = entity.getPushObjectContentOperations();
        if (pushObjectContentOperations != null) {
            stmt.bindString(32, pushObjectContentOperations);
        }

        Long pushObjectContentPubTime = entity.getPushObjectContentPubTime();
        if (pushObjectContentPubTime != null) {
            stmt.bindLong(33, pushObjectContentPubTime);
        }

        String pushSessions = entity.getPushSessions();
        if (pushSessions != null) {
            stmt.bindString(34, pushSessions);
        }

        Long pushexpire = entity.getPushexpire();
        if (pushexpire != null) {
            stmt.bindLong(35, pushexpire);
        }

        Integer toReadStatus = entity.getToReadStatus();
        if (toReadStatus != null) {
            stmt.bindLong(36, toReadStatus);
        }

        Long showTime = entity.getShowTime();
        if (showTime != null) {
            stmt.bindLong(37, showTime);
        }

        Integer recVoiceReadStatus = entity.getRecVoiceReadStatus();
        if (recVoiceReadStatus != null) {
            stmt.bindLong(38, recVoiceReadStatus);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public XmppMessage readEntity(Cursor cursor, int offset) {
        XmppMessage entity = new XmppMessage( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sid
                cursor.getString(offset + 2), // to_
                cursor.getString(offset + 3), // from_
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // body
                cursor.getInt(offset + 6), // direct
                cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // createTime
                cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // mold
                cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // voiceLength
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // filePath
                cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // status
                cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // readStatus
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // extLocalUserName
                cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // extRemoteUserName
                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // extLocalDisplayName
                cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // extRemoteDisplayName
                cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // extGroupOperateType
                cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // extGroupOperateIsdeal
                cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // extGroupOperateUserName
                cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // extGroupOperateUserNick
                cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // extGroupMemberUserName
                cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // extGroupMemberUserNick
                cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // extInternalFilePath
                cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // pushToken
                cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // pushContent
                cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // pushMsgType
                cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // pushStatusId
                cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // pushtoUserNames
                cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // pushObjectContentBody
                cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // pushObjectContentAppId
                cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // pushObjectContentOperations
                cursor.isNull(offset + 32) ? null : cursor.getLong(offset + 32), // pushObjectContentPubTime
                cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // pushSessions
                cursor.isNull(offset + 34) ? null : cursor.getLong(offset + 34), // pushexpire
                cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35),//toreadstatus
                cursor.isNull(offset + 36) ? null : cursor.getLong(offset + 36),//
                cursor.isNull(offset + 37) ? null : cursor.getInt(offset + 37)//
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, XmppMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTo_(cursor.getString(offset + 2));
        entity.setFrom_(cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBody(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDirect(cursor.getInt(offset + 6));
        entity.setCreateTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setMold(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setVoiceLength(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setFilePath(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStatus(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setReadStatus(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setExtLocalUserName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setExtRemoteUserName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setExtLocalDisplayName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setExtRemoteDisplayName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setExtGroupOperateType(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setExtGroupOperateIsdeal(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setExtGroupOperateUserName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setExtGroupOperateUserNick(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setExtGroupMemberUserName(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setExtGroupMemberUserNick(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setExtInternalFilePath(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setPushToken(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setPushContent(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setPushMsgType(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setPushStatusId(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setPushtoUserNames(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setPushObjectContentBody(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setPushObjectContentAppId(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setPushObjectContentOperations(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setPushObjectContentPubTime(cursor.isNull(offset + 32) ? null : cursor.getLong(offset + 32));
        entity.setPushSessions(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setPushexpire(cursor.isNull(offset + 34) ? null : cursor.getLong(offset + 34));
        entity.setToReadStatus(cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35));
        entity.setShowTime(cursor.isNull(offset + 36) ? null : cursor.getLong(offset + 36));
        entity.setRecVoiceReadStatus(cursor.isNull(offset + 37) ? null : cursor.getInt(offset + 37));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(XmppMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(XmppMessage entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
