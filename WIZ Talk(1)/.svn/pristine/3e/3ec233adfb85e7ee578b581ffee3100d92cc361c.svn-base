//
// DO NOT EDIT THIS FILE.Generated using AndroidAnnotations 3.3.1.
//  You can create a larger work that contains this file and distribute that work under terms of your choice.
//


package com.yxst.epic.unifyplatform.apppush.view;

import android.content.Context;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.TextView;
import com.yxst.epic.unifyplatform.R.id;
import com.yxst.epic.unifyplatform.R.layout;
import com.yxst.epic.unifyplatform.view.BiaoQingView;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;


/**
 * We use @SuppressWarning here because our java code
 * generator doesn't know that there is no need
 * to import OnXXXListeners from View as we already
 * are in a View.
 * 
 */
@SuppressWarnings("unused")
public final class FooterTextView_
    extends FooterTextView
    implements HasViews, OnViewChangedListener
{

    private boolean alreadyInflated_ = false;
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();

    public FooterTextView_(Context context) {
        super(context);
        init_();
    }

    public FooterTextView_(Context context, AttributeSet attrs) {
        super(context, attrs);
        init_();
    }

    public static FooterTextView build(Context context) {
        FooterTextView_ instance = new FooterTextView_(context);
        instance.onFinishInflate();
        return instance;
    }

    /**
     * The mAlreadyInflated_ hack is needed because of an Android bug
     * which leads to infinite calls of onFinishInflate()
     * when inflating a layout with a parent and using
     * the <merge /> tag.
     * 
     */
    @Override
    public void onFinishInflate() {
        if (!alreadyInflated_) {
            alreadyInflated_ = true;
            inflate(getContext(), layout.footer_text, this);
            onViewChangedNotifier_.notifyViewChanged(this);
        }
        super.onFinishInflate();
    }

    private void init_() {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        afterInject();
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    public static FooterTextView build(Context context, AttributeSet attrs) {
        FooterTextView_ instance = new FooterTextView_(context, attrs);
        instance.onFinishInflate();
        return instance;
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        btnSend = ((Button) hasViews.findViewById(id.btnSend));
        btnTypeSelect = ((ImageButton) hasViews.findViewById(id.btnTypeSelect));
        ibTextToList = ((ImageButton) hasViews.findViewById(id.btn_mmfooter_texttolist));
        editText = ((EditText) hasViews.findViewById(id.editText));
        cbChattingSetmode = ((CheckBox) hasViews.findViewById(id.cbChattingSetmode));
        viewTypeSelect = ((TypeSelectView) hasViews.findViewById(id.viewTypeSelect));
        viewBiaoQing = ((BiaoQingView) hasViews.findViewById(id.viewBiaoQing));
        btnChattingBiaoqing = ((CheckBox) hasViews.findViewById(id.btnChattingBiaoqing));
        viewDivider = hasViews.findViewById(id.viewDivider);
        btnVoice = ((Button) hasViews.findViewById(id.btnVoice));
        if (btnSend!= null) {
            btnSend.setOnClickListener(new OnClickListener() {


                @Override
                public void onClick(View view) {
                    FooterTextView_.this.onBtnSend(view);
                }

            }
            );
        }
        if (btnTypeSelect!= null) {
            btnTypeSelect.setOnClickListener(new OnClickListener() {


                @Override
                public void onClick(View view) {
                    FooterTextView_.this.onClickTypeSelect();
                }

            }
            );
        }
        if (btnVoice!= null) {
            btnVoice.setOnTouchListener(new OnTouchListener() {


                @Override
                public boolean onTouch(View view, MotionEvent event) {
                    FooterTextView_.this.onTouchBtnVoice(view, event);
                    return true;
                }

            }
            );
        }
        if (cbChattingSetmode!= null) {
            cbChattingSetmode.setOnCheckedChangeListener(new OnCheckedChangeListener() {


                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    FooterTextView_.this.onCheckedChangeChattingSetmode(buttonView, isChecked);
                }

            }
            );
        }
        if (btnChattingBiaoqing!= null) {
            btnChattingBiaoqing.setOnCheckedChangeListener(new OnCheckedChangeListener() {


                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    FooterTextView_.this.onCheckedChangeBiaoQing(buttonView, isChecked);
                }

            }
            );
        }
        {
            final TextView view = ((TextView) hasViews.findViewById(id.editText));
            if (view!= null) {
                view.addTextChangedListener(new TextWatcher() {


                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {
                        FooterTextView_.this.onTextChange(s, start, before, count);
                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                    }

                }
                );
            }
        }
        afterViews();
    }

}
