//
// DO NOT EDIT THIS FILE.Generated using AndroidAnnotations 3.3.1.
//  You can create a larger work that contains this file and distribute that work under terms of your choice.
//


package com.yxst.epic.unifyplatform.apppush.view;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.support.v4.app.ActivityCompat;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import android.widget.ListView;
import com.yxst.epic.unifyplatform.R.layout;
import com.yxst.epic.unifyplatform.apppush.OperationRest_;
import com.yxst.epic.unifyplatform.apppush.adapter.AppPushChatListAdapter_;
import com.yxst.epic.unifyplatform.dto.response.GetAppOperationListResponse;
import com.yxst.epic.unifyplatform.dto.response.Response;
import com.yxst.epic.unifyplatform.rest.Appmsgsrv8094_;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.SdkVersionHelper;
import org.androidannotations.api.builder.ActivityIntentBuilder;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;
import org.springframework.core.NestedRuntimeException;

public final class ChatActivity_
    extends ChatActivity
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    public final static String LOCAL_USER_NAME_EXTRA = "localUserName";
    public final static String REMOTE_USER_NAME_EXTRA = "remoteUserName";
    public final static String REMOTE_DISPLAY_NAME_EXTRA = "remoteDisplayName";
    private Handler handler_ = new Handler(Looper.getMainLooper());

    @java.lang.Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
        setContentView(layout.im_activity_chat);
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        mChatAdapter = AppPushChatListAdapter_.getInstance_(this);
        operationRest = new OperationRest_(this);
        myRestClient = new Appmsgsrv8094_(this);
        injectExtras_();
        afterInject();
    }

    @java.lang.Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @java.lang.Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @java.lang.Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static ChatActivity_.IntentBuilder_ intent(Context context) {
        return new ChatActivity_.IntentBuilder_(context);
    }

    public static ChatActivity_.IntentBuilder_ intent(android.app.Fragment fragment) {
        return new ChatActivity_.IntentBuilder_(fragment);
    }

    public static ChatActivity_.IntentBuilder_ intent(android.support.v4.app.Fragment supportFragment) {
        return new ChatActivity_.IntentBuilder_(supportFragment);
    }

    @java.lang.Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (((SdkVersionHelper.getSdkInt()< 5)&&(keyCode == KeyEvent.KEYCODE_BACK))&&(event.getRepeatCount() == 0)) {
            onBackPressed();
        }
        return super.onKeyDown(keyCode, event);
    }

    @java.lang.Override
    public void onViewChanged(HasViews hasViews) {
        viewRcd = ((RcdView) hasViews.findViewById(com.yxst.epic.unifyplatform.R.id.viewRcd));
        listView = ((ListView) hasViews.findViewById(android.R.id.list));
        viewChatSendOpt = ((ChatSendOptView) hasViews.findViewById(com.yxst.epic.unifyplatform.R.id.viewChatSendOpt));
        viewFooter = ((FooterView) hasViews.findViewById(com.yxst.epic.unifyplatform.R.id.viewFooter));
        layoutRoot = ((ResizeLayout) hasViews.findViewById(com.yxst.epic.unifyplatform.R.id.layoutRoot));
        afterViews();
    }

    private void injectExtras_() {
        Bundle extras_ = getIntent().getExtras();
        if (extras_!= null) {
            if (extras_.containsKey(LOCAL_USER_NAME_EXTRA)) {
                localUserName = extras_.getString(LOCAL_USER_NAME_EXTRA);
            }
            if (extras_.containsKey(REMOTE_USER_NAME_EXTRA)) {
                remoteUserName = extras_.getString(REMOTE_USER_NAME_EXTRA);
            }
            if (extras_.containsKey(REMOTE_DISPLAY_NAME_EXTRA)) {
                remoteDisplayName = extras_.getString(REMOTE_DISPLAY_NAME_EXTRA);
            }
        }
    }

    @java.lang.Override
    public void setIntent(Intent newIntent) {
        super.setIntent(newIntent);
        injectExtras_();
    }

    @java.lang.Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        switch (requestCode) {
            case  3 :
                ChatActivity_.this.onActivityResultGetImageByCamera(resultCode, data);
                break;
            case  2 :
                ChatActivity_.this.onActivityResultGetImageBySdcard(resultCode, data);
                break;
            case  4 :
                ChatActivity_.this.onActivityResultAppDetail(resultCode, data);
                break;
            case  1 :
                ChatActivity_.this.onActivityResultChatDetail(resultCode, data);
                break;
        }
    }

    @java.lang.Override
    public void onRestClientExceptionThrown(final NestedRuntimeException e) {
        handler_.post(new Runnable() {


            @java.lang.Override
            public void run() {
                ChatActivity_.super.onRestClientExceptionThrown(e);
            }

        }
        );
    }

    @java.lang.Override
    public void onPreExecuteOpt() {
        handler_.post(new Runnable() {


            @java.lang.Override
            public void run() {
                ChatActivity_.super.onPreExecuteOpt();
            }

        }
        );
    }

    @java.lang.Override
    public void onPostExecuteGetAppOperationList(final GetAppOperationListResponse response) {
        handler_.post(new Runnable() {


            @java.lang.Override
            public void run() {
                ChatActivity_.super.onPostExecuteGetAppOperationList(response);
            }

        }
        );
    }

    @java.lang.Override
    public void onPostExecuteOpt(final Response response) {
        handler_.post(new Runnable() {


            @java.lang.Override
            public void run() {
                ChatActivity_.super.onPostExecuteOpt(response);
            }

        }
        );
    }

    @java.lang.Override
    public void doInBackgroundPush(final String content) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @java.lang.Override
            public void execute() {
                try {
                    ChatActivity_.super.doInBackgroundPush(content);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @java.lang.Override
    public void updateReadWithNoObserver() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @java.lang.Override
            public void execute() {
                try {
                    ChatActivity_.super.updateReadWithNoObserver();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @java.lang.Override
    public void doInBackgroundSendMsgImg(final String filePath) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @java.lang.Override
            public void execute() {
                try {
                    ChatActivity_.super.doInBackgroundSendMsgImg(filePath);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @java.lang.Override
    public void onCompressBitmap(final String filePaht) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @java.lang.Override
            public void execute() {
                try {
                    ChatActivity_.super.onCompressBitmap(filePaht);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @java.lang.Override
    public void doInBackgroundOperation(final String url) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("doInBackgroundOperation", 0, "doInBackgroundOperation") {


            @java.lang.Override
            public void execute() {
                try {
                    ChatActivity_.super.doInBackgroundOperation(url);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @java.lang.Override
    public void doInBackgroundGetAppOperationList() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @java.lang.Override
            public void execute() {
                try {
                    ChatActivity_.super.doInBackgroundGetAppOperationList();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @java.lang.Override
    public void doInBackgroundSendMsgVoice(final String filePath, final long voiceLength) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @java.lang.Override
            public void execute() {
                try {
                    ChatActivity_.super.doInBackgroundSendMsgVoice(filePath, voiceLength);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    public static class IntentBuilder_
        extends ActivityIntentBuilder<ChatActivity_.IntentBuilder_>
    {

        private android.app.Fragment fragment_;
        private android.support.v4.app.Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            super(context, ChatActivity_.class);
        }

        public IntentBuilder_(android.app.Fragment fragment) {
            super(fragment.getActivity(), ChatActivity_.class);
            fragment_ = fragment;
        }

        public IntentBuilder_(android.support.v4.app.Fragment fragment) {
            super(fragment.getActivity(), ChatActivity_.class);
            fragmentSupport_ = fragment;
        }

        @java.lang.Override
        public void startForResult(int requestCode) {
            if (fragmentSupport_!= null) {
                fragmentSupport_.startActivityForResult(intent, requestCode);
            } else {
                if (fragment_!= null) {
                    fragment_.startActivityForResult(intent, requestCode, lastOptions);
                } else {
                    if (context instanceof Activity) {
                        Activity activity = ((Activity) context);
                        ActivityCompat.startActivityForResult(activity, intent, requestCode, lastOptions);
                    } else {
                        context.startActivity(intent, lastOptions);
                    }
                }
            }
        }

        public ChatActivity_.IntentBuilder_ localUserName(String localUserName) {
            return super.extra(LOCAL_USER_NAME_EXTRA, localUserName);
        }

        public ChatActivity_.IntentBuilder_ remoteUserName(String remoteUserName) {
            return super.extra(REMOTE_USER_NAME_EXTRA, remoteUserName);
        }

        public ChatActivity_.IntentBuilder_ remoteDisplayName(String remoteDisplayName) {
            return super.extra(REMOTE_DISPLAY_NAME_EXTRA, remoteDisplayName);
        }

    }

}
