//
// DO NOT EDIT THIS FILE.Generated using AndroidAnnotations 3.3.1.
//  You can create a larger work that contains this file and distribute that work under terms of your choice.
//


package com.yxst.epic.unifyplatform.rest;

import java.util.ArrayList;
import java.util.Collections;
import android.content.Context;
import com.yxst.epic.unifyplatform.dto.request.CancelShieldMsgRequest;
import com.yxst.epic.unifyplatform.dto.request.IsUserShieldAppRequest;
import com.yxst.epic.unifyplatform.dto.request.SetShieldMsgRequest;
import com.yxst.epic.unifyplatform.dto.request.UpdateQunTopicRequest;
import com.yxst.epic.unifyplatform.dto.response.CancelShieldMsgResponse;
import com.yxst.epic.unifyplatform.dto.response.IsUserShieldAppResponse;
import com.yxst.epic.unifyplatform.dto.response.SetShieldMsgResponse;
import com.yxst.epic.unifyplatform.dto.response.UpdateQunTopicResponse;
import org.androidannotations.api.rest.RestErrorHandler;
import org.springframework.core.NestedRuntimeException;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.client.ClientHttpRequestInterceptor;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.web.client.RestTemplate;

public final class Appmsgsrv8093_
    implements Appmsgsrv8093
{

    private RestTemplate restTemplate;
    private String rootUrl;
    private RestErrorHandler restErrorHandler;

    public Appmsgsrv8093_(Context context) {
        restTemplate = new RestTemplate();
        rootUrl = "http://10.180.120.63:8093/app/client/device";
        restTemplate.getMessageConverters().clear();
        restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter());
        restTemplate.setInterceptors(new ArrayList<ClientHttpRequestInterceptor>());
        restTemplate.getInterceptors().add(new HttpBasicAuthenticatorInterceptor());
    }

    @Override
    public RestTemplate getRestTemplate() {
        return restTemplate;
    }

    @Override
    public void setRestTemplate(RestTemplate arg0) {
        this.restTemplate = arg0;
    }

    @Override
    public String getRootUrl() {
        return rootUrl;
    }

    @Override
    public void setRootUrl(String arg0) {
        this.rootUrl = arg0;
    }

    @Override
    public void setRestErrorHandler(RestErrorHandler arg0) {
        this.restErrorHandler = arg0;
    }

    @Override
    public IsUserShieldAppResponse isUserShieldApp(IsUserShieldAppRequest request) {
        try {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("application/json")));
            HttpEntity<IsUserShieldAppRequest> requestEntity = new HttpEntity<IsUserShieldAppRequest>(request, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/isUserShieldApp"), HttpMethod.POST, requestEntity, IsUserShieldAppResponse.class).getBody();
        } catch (NestedRuntimeException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public CancelShieldMsgResponse cancelShieldMsg(CancelShieldMsgRequest request) {
        try {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("application/json")));
            HttpEntity<CancelShieldMsgRequest> requestEntity = new HttpEntity<CancelShieldMsgRequest>(request, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/cancelShieldMsg"), HttpMethod.POST, requestEntity, CancelShieldMsgResponse.class).getBody();
        } catch (NestedRuntimeException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public UpdateQunTopicResponse updateQunTopic(UpdateQunTopicRequest request) {
        try {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("application/json")));
            HttpEntity<UpdateQunTopicRequest> requestEntity = new HttpEntity<UpdateQunTopicRequest>(request, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/updateQunTopic"), HttpMethod.POST, requestEntity, UpdateQunTopicResponse.class).getBody();
        } catch (NestedRuntimeException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public SetShieldMsgResponse setShieldMsg(SetShieldMsgRequest request) {
        try {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("application/json")));
            HttpEntity<SetShieldMsgRequest> requestEntity = new HttpEntity<SetShieldMsgRequest>(request, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/setShieldMsg"), HttpMethod.POST, requestEntity, SetShieldMsgResponse.class).getBody();
        } catch (NestedRuntimeException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

}
