package com.yxst.epic.unifyplatform.apppush.adapter;

import android.content.Context;
import android.database.Cursor;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CursorAdapter;

import com.lidroid.xutils.BitmapUtils;
import com.yxst.epic.unifyplatform.DB.DaoSession;
import com.yxst.epic.unifyplatform.DB.MsgInFo;
import com.yxst.epic.unifyplatform.DB.XmppMessage;
import com.yxst.epic.unifyplatform.DB.XmppMessageDao;
import com.yxst.epic.unifyplatform.MyApplication;
import com.yxst.epic.unifyplatform.R;
import com.yxst.epic.unifyplatform.apppush.OnOperationClickListener;
import com.yxst.epic.unifyplatform.apppush.VoiceUtils;
import com.yxst.epic.unifyplatform.apppush.view.ChatItemApp101View;
import com.yxst.epic.unifyplatform.apppush.view.ChatItemApp101View_;
import com.yxst.epic.unifyplatform.apppush.view.ChatItemApp102View;
import com.yxst.epic.unifyplatform.apppush.view.ChatItemApp102View_;
import com.yxst.epic.unifyplatform.apppush.view.ChatItemNullView_;
import com.yxst.epic.unifyplatform.utils.XXBitmapUtils;
import com.yxst.epic.unifyplatform.view.ChatItemView;

import org.androidannotations.annotations.EBean;

/**
 * 用在聊天界面
 */
@EBean
public class AppPushChatListAdapter extends CursorAdapter {

	public static final String TAG = "AppPushChatListAdapter";
	
	private Context context;
	
	private DaoSession daoSession;
	private XmppMessageDao messageDao;
	
	private BitmapUtils bitmapUtils;
	private VoiceUtils voiceUtils;
	
	public AppPushChatListAdapter(Context context) {
		super(context, null, true);
		this.context = context;
		
		daoSession = MyApplication.getDaoSession(context);
		messageDao = daoSession.getXmppMessageDao();
		
		bitmapUtils = new XXBitmapUtils(context);
		bitmapUtils.configDefaultLoadingImage(new ColorDrawable(Color.parseColor("#33000000")));
		bitmapUtils.configDefaultLoadFailedImage(R.drawable.card_photofail);
		
		voiceUtils = new VoiceUtils(context);
	}
	
	public void onDestroy() {
		voiceUtils.destroy();
	}
	
	private OnOperationClickListener mOnOperationClickListener;
	
	public void setOnOperationClickListener(OnOperationClickListener l) {
		mOnOperationClickListener = l;
	}
	
	@Override
	public View newView(Context context, Cursor cursor, ViewGroup parent) {
		int inOut = cursor.getInt(XmppMessageDao.Properties.Direct.ordinal);
		int msgType = cursor.getInt(XmppMessageDao.Properties.Mold.ordinal);
		
		return createChatItemView(context, inOut, msgType);
	}

	public ChatItemView createChatItemView(Context context, int inOut, int msgType) {
		
		if (MsgInFo.INOUT_IN == inOut) {
			/*if (msgType == Msg.MSG_TYPE_NORMAL) {
				ChatFromItemView view = ChatFromItemView_.build(context);
				return view;
			} else if (msgType == Msg.MSG_TYPE_TIPS) {
				ChatItemTipsView view = ChatItemTipsView_.build(context);
				return view;
			} else if(msgType == Msg.MSG_TYPE_IMAGE) {
				ChatItemImgFromView view = ChatItemImgFromView_.build(context);
				view.setBitmapUtils(bitmapUtils);
				return view;
			} else if (msgType == Msg.MSG_TYPE_VOICE) {
				ChatItemVoiceFromView view = ChatItemVoiceFromView_.build(context);
				view.setVoiceUtils(voiceUtils);
				return view;
			} else*/ if (msgType == MsgInFo.MOLE_APP_101) {
				ChatItemApp101View view = ChatItemApp101View_.build(context);
				return view;
			} else if (msgType == MsgInFo.MOLE_APP_102) {
				ChatItemApp102View view = ChatItemApp102View_.build(context);
				view.setOnOperationClickListener(mOnOperationClickListener);
				return view;
			}/* else if (msgType == MsgInFo.MOLE_APP_102) {
				ChatItemApp103View view = ChatItemApp103View_.build(context);
				return view;
			} */
			
		} else if (MsgInFo.INOUT_OUT == inOut) {
			/*if (msgType == Msg.MSG_TYPE_NORMAL) {
				ChatToItemView view = ChatToItemView_.build(context);
				return view;
			} else if(msgType == Msg.MSG_TYPE_IMAGE) {
				ChatItemImgToView view = ChatItemImgToView_.build(context);
				view.setBitmapUtils(bitmapUtils);
				return view;
			} else if (msgType == Msg.MSG_TYPE_VOICE) {
				ChatItemVoiceToView view = ChatItemVoiceToView_.build(context);
				view.setVoiceUtils(voiceUtils);
				return view;
			}*/
			
		}
		
		return ChatItemNullView_.build(context);
	}
	
	@Override
	public void bindView(View view, Context context, Cursor cursor) {
		XmppMessage message = messageDao.readEntity(cursor, 0);
		
		ChatItemView itemView = (ChatItemView) view;
//		itemView.setIconBitmapUtils(bitmapIconUtils);
//		itemView.bind(message, getLastMessageExtTime(cursor));
		itemView.bind(message);
	}

//	private Long getLastMessageExtTime(Cursor cursor) {
//		if (cursor.move(-1)) {
//			return cursor.getLong(MessageDao.Properties.ExtTime.ordinal);
//		}
//		return null;
//	}
	private Long getLastMessageTime(Cursor cursor) {
		if (cursor.move(-1)) {
			long mid = cursor.getLong(XmppMessageDao.Properties.Id.ordinal);
			long extTime = cursor.getLong(XmppMessageDao.Properties.CreateTime.ordinal);
			return extTime;
		}
		return null;
	}
	
//	public static final int VIEW_TYPE_COUNT = 11;//11
//	
//	public static final int VIEW_TYPE_NULL = 0;
//	public static final int VIEW_TYPE_OUT_NORMAL = 1;
//	public static final int VIEW_TYPE_IN_NORMAL = 2;
//	public static final int VIEW_TYPE_IN_TIPS = 3;
//	public static final int VIEW_TYPE_IN_IMAGE = 4;
//	public static final int VIEW_TYPE_OUT_IMAGE = 5;
//	public static final int VIEW_TYPE_OUT_VOICE = 6;
//	public static final int VIEW_TYPE_IN_VOICE = 7;
//	public static final int VIEW_TYPE_IN_APP_101 = 8;
//	public static final int VIEW_TYPE_IN_APP_102 = 9;
//	public static final int VIEW_TYPE_IN_APP_103 = 10;

	public static final int VIEW_TYPE_COUNT = 4;//11

	public static final int VIEW_TYPE_NULL = 0;
	public static final int VIEW_TYPE_IN_APP_101 = 1;
	public static final int VIEW_TYPE_IN_APP_102 = 2;
	public static final int VIEW_TYPE_IN_APP_103 = 3;
	
	@Override
	public int getViewTypeCount() {
		return VIEW_TYPE_COUNT;
	}
	
	@Override
	public int getItemViewType(int position) {
		Cursor cursor = getCursor();
		cursor.moveToPosition(position);
		int inOut = cursor.getInt(XmppMessageDao.Properties.Direct.ordinal);
		int msgType = cursor.getInt(XmppMessageDao.Properties.Mold.ordinal);
		
		return createChatItemViewType(context, inOut, msgType);
	}

	public int createChatItemViewType(Context context, int inOut, int msgType) {
		
		if (MsgInFo.INOUT_IN == inOut) {
			 if (msgType == MsgInFo.MOLE_APP_101) {
				return VIEW_TYPE_IN_APP_101;
			} else if (msgType == MsgInFo.MOLE_APP_102) {
				return VIEW_TYPE_IN_APP_102;
			} else if (msgType == MsgInFo.MOLE_APP_103) {
				return VIEW_TYPE_IN_APP_103;
			}
			
		} else if (MsgInFo.INOUT_OUT == inOut) {
			/*if (msgType == Msg.MSG_TYPE_NORMAL) {
				return VIEW_TYPE_OUT_NORMAL;
			} else if(msgType == Msg.MSG_TYPE_IMAGE) {
				return VIEW_TYPE_OUT_IMAGE;
			} else if(msgType == Msg.MSG_TYPE_VOICE) {
				return VIEW_TYPE_OUT_VOICE;
			}*/
		}
		return VIEW_TYPE_NULL;
	}
	
	public XmppMessage readEntity(Cursor cursor) {
		return messageDao.readEntity(cursor, 0);
	}
}
