package com.yxst.epic.unifyplatform.adapter;

import android.content.Context;
import android.database.Cursor;
import android.support.v4.widget.CursorAdapter;
import android.view.View;
import android.view.ViewGroup;

import com.yxst.epic.unifyplatform.DB.DaoSession;
import com.yxst.epic.unifyplatform.DB.MsgInFo;
import com.yxst.epic.unifyplatform.DB.XmppMessage;
import com.yxst.epic.unifyplatform.DB.XmppMessageDao;
import com.yxst.epic.unifyplatform.MyApplication;
import com.yxst.epic.unifyplatform.apppush.OnOperationClickListener;
import com.yxst.epic.unifyplatform.apppush.view.ChatItemApp101View;
import com.yxst.epic.unifyplatform.apppush.view.ChatItemApp101View_;
import com.yxst.epic.unifyplatform.apppush.view.ChatItemApp102View;
import com.yxst.epic.unifyplatform.apppush.view.ChatItemApp102View_;
import com.yxst.epic.unifyplatform.view.ChatItemReceiveImageView_;
import com.yxst.epic.unifyplatform.view.ChatItemReceiveTextView_;
import com.yxst.epic.unifyplatform.view.ChatItemReceiveVoiceView_;
import com.yxst.epic.unifyplatform.view.ChatItemSendImageView_;
import com.yxst.epic.unifyplatform.view.ChatItemSendTextView_;
import com.yxst.epic.unifyplatform.view.ChatItemSendVoiceView_;
import com.yxst.epic.unifyplatform.view.ChatItemView;
import com.yxst.epic.unifyplatform.view.XChatItemTipsView_;

/**
 * Created by Dong on 2015/10/13.
 */
public class XChatListAdapter extends CursorAdapter{

    private DaoSession mDaoSession;
    private XmppMessageDao messageDao;
    
    private Context mContext;

    public XChatListAdapter(Context context) {
        super(context, null,true);
        mContext = context;
        mDaoSession = MyApplication.getDaoSession(context);
        messageDao = mDaoSession.getXmppMessageDao();
    }

    @Override
    public View newView(Context context, Cursor cursor, ViewGroup parent) {
        int inOut = cursor.getInt(XmppMessageDao.Properties.Direct.ordinal);
        int mold = cursor.getInt(XmppMessageDao.Properties.Mold.ordinal);
        return createChatItem(inOut,mold);
    }

    public ChatItemView createChatItem(int outOrIn, int mold) {
        ChatItemView itemView = null;

        if (outOrIn == MsgInFo.INOUT_IN) {
            switch (mold) {
                case MsgInFo.MOLD_TEXT:
                    itemView = ChatItemReceiveTextView_.build(mContext);
                    break;
                case MsgInFo.MOLD_IMG:
                    itemView = ChatItemReceiveImageView_.build(mContext);
                    break;
                case MsgInFo.MOLD_VOICE:
                    itemView = ChatItemReceiveVoiceView_.build(mContext);
                    break;
                case MsgInFo.MOLD_TIPS:
                	itemView = XChatItemTipsView_.build(mContext);
                	break;
                case  MsgInFo.MOLE_APP_101:
                    itemView = ChatItemApp101View_.build(mContext);
                    break;
                case  MsgInFo.MOLE_APP_102:
                    ChatItemApp102View view = ChatItemApp102View_.build(mContext);
                    view.setOnOperationClickListener(mOnOperationClickListener);
                    itemView = view;
                    break;
                case  MsgInFo.MOLE_APP_103:
                    itemView = ChatItemApp101View_.build(mContext);
                    break;
            }
        }else{
            switch (mold) {
                case  MsgInFo.MOLD_TEXT:
                    itemView = ChatItemSendTextView_.build(mContext);
                    break;
                case MsgInFo.MOLD_IMG:
                    itemView = ChatItemSendImageView_.build(mContext);
                    break;
                case  MsgInFo.MOLD_VOICE:
                    itemView = ChatItemSendVoiceView_.build(mContext);
                    break;
                case MsgInFo.MOLD_TIPS:
                	itemView = XChatItemTipsView_.build(mContext);
                	break;
            }
        }
        
        return itemView;
    }

    @Override
    public int getItemViewType(int position) {
        Cursor cursor = getCursor();
        cursor.moveToPosition(position);
        int inOut = cursor.getInt(XmppMessageDao.Properties.Direct.ordinal);
        int mold = cursor.getInt(XmppMessageDao.Properties.Mold.ordinal);
        return createItemViewType(inOut,mold);

    }

    //Integers must be in the range 0 to {@link #getViewTypeCount} - 1
    public static final int VIEW_TYPE_COUNT = 11;
    
    public static final int VIEW_TYPE_IN_NORMAL = 1;
    public static final int VIEW_TYPE_IN_VOICE = 2;
    public static final int VIEW_TYPE_IN_IMAGE = 3;
    public static final int VIEW_TYPE_OUT_IMAGE = 4;
    public static final int VIEW_TYPE_OUT_VOICE = 5;
    public static final int VIEW_TYPE_OUT_NORMAL = 0;
    public static final int VIEW_TYPE_IN_TIPS = 6;
    

    public static final int VIEW_TYPE_NULL = 7;
    public static final int VIEW_TYPE_IN_APP_101 = 8;
    public static final int VIEW_TYPE_IN_APP_102 = 9;
    public static final int VIEW_TYPE_IN_APP_103 = 10;
    

    public int createItemViewType(int inOut ,int mold){
        int viewType = -1;
        if (inOut == MsgInFo.INOUT_IN) {
            switch (mold) {
                case MsgInFo.MOLD_TEXT:
                    viewType = VIEW_TYPE_IN_NORMAL;
                    break;
                case MsgInFo.MOLD_IMG:
                    viewType = VIEW_TYPE_IN_IMAGE;
                    break;
                case MsgInFo.MOLD_VOICE:
                    viewType = VIEW_TYPE_IN_VOICE;
                    break;
                case MsgInFo.MOLD_TIPS:
                	viewType = VIEW_TYPE_IN_TIPS;
                    break;

                case MsgInFo.MOLE_APP_101:
                    viewType = VIEW_TYPE_IN_APP_101;
                    break;
                case MsgInFo.MOLE_APP_102:
                    viewType =  VIEW_TYPE_IN_APP_102;
                    break;
                case  MsgInFo.MOLE_APP_103:
                    viewType =  VIEW_TYPE_IN_APP_103;
                    break;
                }
        }else{
            switch (mold) {
                case MsgInFo.MOLD_TEXT:
                    viewType = VIEW_TYPE_OUT_NORMAL;
                    break;
                case MsgInFo.MOLD_IMG:
                    viewType = VIEW_TYPE_OUT_IMAGE;
                    break;
                case MsgInFo.MOLD_VOICE:
                    viewType = VIEW_TYPE_OUT_VOICE;
                    break;
                case MsgInFo.MOLD_TIPS:
                	viewType = VIEW_TYPE_IN_TIPS;
                    break;
            }
        }
        
        return viewType;
    }

    private OnOperationClickListener mOnOperationClickListener;

    public void setOnOperationClickListener(OnOperationClickListener l) {
        mOnOperationClickListener = l;
    }

    @Override
    public int getViewTypeCount() {
        return VIEW_TYPE_COUNT;
    }

    @Override
    public void bindView(View view, Context context, Cursor cursor) {
        XmppMessage msg = readEntity(cursor); 

        ChatItemView itemView = (ChatItemView)view;
        itemView.bind(msg);
    }
    public XmppMessage readEntity(Cursor cursor) {
        XmppMessage entity = messageDao.readEntity(cursor,0);
        return entity;
    }
}
