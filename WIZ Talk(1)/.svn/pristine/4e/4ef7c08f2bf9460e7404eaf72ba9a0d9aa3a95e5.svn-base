//
// DO NOT EDIT THIS FILE.Generated using AndroidAnnotations 3.3.1.
//  You can create a larger work that contains this file and distribute that work under terms of your choice.
//


package com.yxst.epic.unifyplatform.view;

import android.content.Context;
import android.os.Handler;
import android.os.Looper;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import com.yxst.epic.unifyplatform.R.id;
import com.yxst.epic.unifyplatform.R.layout;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;


/**
 * We use @SuppressWarning here because our java code
 * generator doesn't know that there is no need
 * to import OnXXXListeners from View as we already
 * are in a View.
 * 
 */
@SuppressWarnings("unused")
public final class GroupOperateView_
    extends GroupOperateView
    implements HasViews, OnViewChangedListener
{

    private boolean alreadyInflated_ = false;
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private Handler handler_ = new Handler(Looper.getMainLooper());

    public GroupOperateView_(Context context) {
        super(context);
        init_();
    }

    public static GroupOperateView build(Context context) {
        GroupOperateView_ instance = new GroupOperateView_(context);
        instance.onFinishInflate();
        return instance;
    }

    /**
     * The mAlreadyInflated_ hack is needed because of an Android bug
     * which leads to infinite calls of onFinishInflate()
     * when inflating a layout with a parent and using
     * the <merge /> tag.
     * 
     */
    @Override
    public void onFinishInflate() {
        if (!alreadyInflated_) {
            alreadyInflated_ = true;
            inflate(getContext(), layout.item_group_operate, this);
            onViewChangedNotifier_.notifyViewChanged(this);
        }
        super.onFinishInflate();
    }

    private void init_() {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        tv_group_operate_user = ((TextView) hasViews.findViewById(id.tv_group_operate_user));
        iv_group_avatar = ((ImageView) hasViews.findViewById(id.iv_group_avatar));
        tv_group_operate_status = ((TextView) hasViews.findViewById(id.tv_group_operate_status));
        tv_group_msg = ((TextView) hasViews.findViewById(id.tv_group_msg));
        tv_group_name = ((TextView) hasViews.findViewById(id.tv_group_name));
        btn_group_operate_status = ((Button) hasViews.findViewById(id.btn_group_operate_status));
        if (btn_group_operate_status!= null) {
            btn_group_operate_status.setOnClickListener(new OnClickListener() {


                @Override
                public void onClick(View view) {
                    GroupOperateView_.this.btn_group_operate_status(view);
                }

            }
            );
        }
    }

    @Override
    public void onPreExecute() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                GroupOperateView_.super.onPreExecute();
            }

        }
        );
    }

    @Override
    public void onPostExecute(final boolean result, final int operateType) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                GroupOperateView_.super.onPostExecute(result, operateType);
            }

        }
        );
    }

    @Override
    public void doInbackgroundDealApply() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    GroupOperateView_.super.doInbackgroundDealApply();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void doInbackground() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    GroupOperateView_.super.doInbackground();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

}
