//
// DO NOT EDIT THIS FILE.Generated using AndroidAnnotations 3.3.1.
//  You can create a larger work that contains this file and distribute that work under terms of your choice.
//


package com.yxst.epic.unifyplatform.apppush.view;

import android.content.Context;
import android.content.res.Resources;
import android.util.AttributeSet;
import android.widget.TextView;
import com.yxst.epic.unifyplatform.R.color;
import com.yxst.epic.unifyplatform.R.id;
import com.yxst.epic.unifyplatform.R.layout;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;


/**
 * We use @SuppressWarning here because our java code
 * generator doesn't know that there is no need
 * to import OnXXXListeners from View as we already
 * are in a View.
 * 
 */
@SuppressWarnings("unused")
public final class App102Operation_
    extends App102Operation
    implements HasViews, OnViewChangedListener
{

    private boolean alreadyInflated_ = false;
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();

    public App102Operation_(Context context) {
        super(context);
        init_();
    }

    public App102Operation_(Context context, AttributeSet attrs) {
        super(context, attrs);
        init_();
    }

    public App102Operation_(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        init_();
    }

    public static App102Operation build(Context context) {
        App102Operation_ instance = new App102Operation_(context);
        instance.onFinishInflate();
        return instance;
    }

    /**
     * The mAlreadyInflated_ hack is needed because of an Android bug
     * which leads to infinite calls of onFinishInflate()
     * when inflating a layout with a parent and using
     * the <merge /> tag.
     * 
     */
    @Override
    public void onFinishInflate() {
        if (!alreadyInflated_) {
            alreadyInflated_ = true;
            inflate(getContext(), layout.list_item_app_102_operation, this);
            onViewChangedNotifier_.notifyViewChanged(this);
        }
        super.onFinishInflate();
    }

    private void init_() {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        {
            OnViewChangedNotifier.registerOnViewChangedListener(this);
            Resources resources_ = getContext().getResources();
            list_item_app_102_operation_more_text = resources_.getColorStateList(color.list_item_app_102_operation_more_text);
            list_item_app_102_operation_text = resources_.getColorStateList(color.list_item_app_102_operation_text);
        }
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    public static App102Operation build(Context context, AttributeSet attrs) {
        App102Operation_ instance = new App102Operation_(context, attrs);
        instance.onFinishInflate();
        return instance;
    }

    public static App102Operation build(Context context, AttributeSet attrs, int defStyle) {
        App102Operation_ instance = new App102Operation_(context, attrs, defStyle);
        instance.onFinishInflate();
        return instance;
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        tvContent = ((TextView) hasViews.findViewById(id.tvContent));
        layoutRoot = hasViews.findViewById(id.layoutRoot);
    }

}
