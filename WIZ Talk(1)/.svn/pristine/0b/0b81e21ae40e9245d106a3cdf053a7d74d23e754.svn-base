//
// DO NOT EDIT THIS FILE.Generated using AndroidAnnotations 3.3.1.
//  You can create a larger work that contains this file and distribute that work under terms of your choice.
//


package com.yxst.epic.unifyplatform.rest;

import java.util.ArrayList;
import java.util.Collections;
import android.content.Context;
import com.yxst.epic.unifyplatform.dto.request.AddOrRemoveContactRequest;
import com.yxst.epic.unifyplatform.dto.request.CheckUpdateRequest;
import com.yxst.epic.unifyplatform.dto.request.GetApplicationListRequest;
import com.yxst.epic.unifyplatform.dto.request.GetMemberRequest;
import com.yxst.epic.unifyplatform.dto.request.GetMemberResponse;
import com.yxst.epic.unifyplatform.dto.request.GetOrgInfoRequest;
import com.yxst.epic.unifyplatform.dto.request.GetOrgUserListRequest;
import com.yxst.epic.unifyplatform.dto.request.LoginRequest;
import com.yxst.epic.unifyplatform.dto.request.SearchRequest;
import com.yxst.epic.unifyplatform.dto.request.SetUserAvatarRequest;
import com.yxst.epic.unifyplatform.dto.request.SetUserInfoRequest;
import com.yxst.epic.unifyplatform.dto.response.AddOrRemoveContactResponse;
import com.yxst.epic.unifyplatform.dto.response.CheckUpdateResponse;
import com.yxst.epic.unifyplatform.dto.response.GetApplicationListResponse;
import com.yxst.epic.unifyplatform.dto.response.GetOrgInfoResponse;
import com.yxst.epic.unifyplatform.dto.response.GetOrgUserListResponse;
import com.yxst.epic.unifyplatform.dto.response.LoginResponse;
import com.yxst.epic.unifyplatform.dto.response.SearchResponse;
import com.yxst.epic.unifyplatform.dto.response.SetUserAvatarResponse;
import com.yxst.epic.unifyplatform.dto.response.SetUserInfoResponse;
import org.androidannotations.api.rest.RestErrorHandler;
import org.springframework.core.NestedRuntimeException;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.client.ClientHttpRequestInterceptor;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.web.client.RestTemplate;

public final class Appmsgsrv8094Https_
    implements Appmsgsrv8094Https
{

    private RestTemplate restTemplate;
    private String rootUrl;
    private RestErrorHandler restErrorHandler;

    public Appmsgsrv8094Https_(Context context) {
        restTemplate = new RestTemplate();
        rootUrl = "http://115.29.107.77:8093/app/client/device";
        restTemplate.getMessageConverters().clear();
        restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter());
        restTemplate.setInterceptors(new ArrayList<ClientHttpRequestInterceptor>());
        restTemplate.getInterceptors().add(new HttpBasicAuthenticatorInterceptor());
    }

    @Override
    public RestTemplate getRestTemplate() {
        return restTemplate;
    }

    @Override
    public void setRestTemplate(RestTemplate arg0) {
        this.restTemplate = arg0;
    }

    @Override
    public String getRootUrl() {
        return rootUrl;
    }

    @Override
    public void setRootUrl(String arg0) {
        this.rootUrl = arg0;
    }

    @Override
    public void setRestErrorHandler(RestErrorHandler arg0) {
        this.restErrorHandler = arg0;
    }

    @Override
    public String getWelcomeImg() {
        try {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("text/plain")));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/getWelcomeImg"), HttpMethod.GET, requestEntity, String.class).getBody();
        } catch (NestedRuntimeException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public LoginResponse login(LoginRequest request) {
        try {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("application/json")));
            HttpEntity<LoginRequest> requestEntity = new HttpEntity<LoginRequest>(request, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/login"), HttpMethod.POST, requestEntity, LoginResponse.class).getBody();
        } catch (NestedRuntimeException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public CheckUpdateResponse checkUpdate(CheckUpdateRequest request) {
        try {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("application/json")));
            HttpEntity<CheckUpdateRequest> requestEntity = new HttpEntity<CheckUpdateRequest>(request, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/checkUpdate"), HttpMethod.POST, requestEntity, CheckUpdateResponse.class).getBody();
        } catch (NestedRuntimeException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public GetMemberResponse getMember(GetMemberRequest request) {
        try {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("application/json")));
            HttpEntity<GetMemberRequest> requestEntity = new HttpEntity<GetMemberRequest>(request, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/getMember"), HttpMethod.POST, requestEntity, GetMemberResponse.class).getBody();
        } catch (NestedRuntimeException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public AddOrRemoveContactResponse addOrRemoveContact(AddOrRemoveContactRequest request) {
        try {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("application/json")));
            HttpEntity<AddOrRemoveContactRequest> requestEntity = new HttpEntity<AddOrRemoveContactRequest>(request, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/addOrRemoveContact"), HttpMethod.POST, requestEntity, AddOrRemoveContactResponse.class).getBody();
        } catch (NestedRuntimeException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public GetOrgUserListResponse getOrgUserList(GetOrgUserListRequest request) {
        try {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("application/json")));
            HttpEntity<GetOrgUserListRequest> requestEntity = new HttpEntity<GetOrgUserListRequest>(request, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/getOrgUserList"), HttpMethod.POST, requestEntity, GetOrgUserListResponse.class).getBody();
        } catch (NestedRuntimeException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public GetOrgInfoResponse getOrgInfo(GetOrgInfoRequest request) {
        try {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("application/json")));
            HttpEntity<GetOrgInfoRequest> requestEntity = new HttpEntity<GetOrgInfoRequest>(request, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/getOrgInfo"), HttpMethod.POST, requestEntity, GetOrgInfoResponse.class).getBody();
        } catch (NestedRuntimeException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public GetApplicationListResponse getApplicationList(GetApplicationListRequest request) {
        try {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("application/json")));
            HttpEntity<GetApplicationListRequest> requestEntity = new HttpEntity<GetApplicationListRequest>(request, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/getApplicationList"), HttpMethod.POST, requestEntity, GetApplicationListResponse.class).getBody();
        } catch (NestedRuntimeException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public SearchResponse search(SearchRequest request) {
        try {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("application/json")));
            HttpEntity<SearchRequest> requestEntity = new HttpEntity<SearchRequest>(request, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/search"), HttpMethod.POST, requestEntity, SearchResponse.class).getBody();
        } catch (NestedRuntimeException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public SetUserInfoResponse setUserInfo(SetUserInfoRequest request) {
        try {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("application/json")));
            HttpEntity<SetUserInfoRequest> requestEntity = new HttpEntity<SetUserInfoRequest>(request, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/setUserInfo"), HttpMethod.POST, requestEntity, SetUserInfoResponse.class).getBody();
        } catch (NestedRuntimeException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public SetUserAvatarResponse setUserAvatar(SetUserAvatarRequest request) {
        try {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("application/json")));
            HttpEntity<SetUserAvatarRequest> requestEntity = new HttpEntity<SetUserAvatarRequest>(request, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/setUserAvatar"), HttpMethod.POST, requestEntity, SetUserAvatarResponse.class).getBody();
        } catch (NestedRuntimeException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

}
