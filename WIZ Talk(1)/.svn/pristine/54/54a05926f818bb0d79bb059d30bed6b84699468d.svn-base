package com.yxst.epic.unifyplatform.activity;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;

import org.afinal.simplecache.ACache;
import org.androidannotations.annotations.AfterInject;
import org.androidannotations.annotations.AfterViews;
import org.androidannotations.annotations.Background;
import org.androidannotations.annotations.Bean;
import org.androidannotations.annotations.Click;
import org.androidannotations.annotations.EActivity;
import org.androidannotations.annotations.Extra;
import org.androidannotations.annotations.OnActivityResult;
import org.androidannotations.annotations.UiThread;
import org.androidannotations.annotations.ViewById;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.rest.RestErrorHandler;
import org.jivesoftware.smackx.xdata.Form;
import org.jivesoftware.smackx.xdata.FormField;
import org.jivesoftware.smackx.xdata.packet.DataForm;
import org.jivesoftware.smackx.xdata.packet.DataForm.Type;
import org.springframework.core.NestedRuntimeException;

import android.app.ProgressDialog;
import android.content.ComponentName;
import android.content.Intent;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.epic.traverse.push.smack.XmppManager;
import com.epic.traverse.push.util.L;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.skysea.group.Group;
import com.skysea.group.GroupService;
import com.skysea.group.MemberInfo;
import com.yxst.epic.unifyplatform.DB.Member;
import com.yxst.epic.unifyplatform.DB.MsgInFo;
import com.yxst.epic.unifyplatform.DB.XmppDbManager;
import com.yxst.epic.unifyplatform.MyApplication;
import com.yxst.epic.unifyplatform.R;
import com.yxst.epic.unifyplatform.adapter.XChatDetailAdapter;
import com.yxst.epic.unifyplatform.fragment.ReTopicQunDialogFragment;
import com.yxst.epic.unifyplatform.fragment.ReTopicQunDialogFragment_;
import com.yxst.epic.unifyplatform.public_store.OpenfireConstDefine;
import com.yxst.epic.unifyplatform.view.HeaderLayout;
import com.yxst.epic.unifyplatform.view.WrapContentHeightGridView;

@EActivity(R.layout.activity_chat_detail)
public class XChatDetailActivity extends ActionBarActivity implements
		RestErrorHandler, XChatDetailAdapter.OnXDelMemberListenr {

	private static final String TAG = XChatDetailActivity.class.getSimpleName();

	String localUserName;

	@Extra
	Member localMember;

	@Extra
	String remoteUserName;// groupJid 接收方长这样 126@group.admin-pc/xujianxue
							// 发送方126@group.admin-pc

	private String mGroupJid;

	@Extra
	String remoteDisplayName;

	@ViewById(R.id.grid)
	WrapContentHeightGridView mGridView;

	@ViewById
	View trQun;

	@ViewById
	TextView tvQun;

	@ViewById
	Button btnQuitQun;

	@ViewById
	Button btnSenMsg2Group;//进入群聊
	
	@Extra
	int fromWhere;
	
	public final static int FROM_GROUP_LIST_ACTIVITY = 1;//从群列表来的。
	public final static int FROM_XCHAT_ACTIVITY = 2;//从聊天界面来的。

	@Bean
	XChatDetailAdapter mAdapter;

	private String mOwner; // 群里的管理员 不包含Jid的
	
	GroupService  gService ;
	
	private final static int ACTOIN_DESTROY = 1;//删除群操作
	
	private final static int ACTOIN_KICK = 2;//踢人操作
	
	private final static int ACTOIN_EXITE = 2;//退出群操作
	

	protected String localBarJid;

	@AfterInject
	void afterInject() {
		localUserName = MyApplication.getInstance().getLocalUserName();
		localBarJid = MyApplication.getInstance().getOpenfireJid();
		localBarJid = localBarJid.substring(0,localBarJid.lastIndexOf("@"));
	}
	HeaderLayout mHeaderLayout;
	public void initTopBarForLeft(String titleName) {
		mHeaderLayout = (HeaderLayout) findViewById(R.id.common_actionbar);
		mHeaderLayout.init(HeaderLayout.HeaderStyle.TITLE_DOUBLE_IMAGEBUTTON);
		mHeaderLayout.setTitleAndLeftImageButton(titleName,
				R.mipmap.blueback,
				new  HeaderLayout.onLeftImageButtonClickListener (){
					@Override
					public void onClick() {
						finish();
					}
				});
		//R.drawable.base_action_bar_back_bg_selector
	}
	@AfterViews
	void afterViews() {
		final ActionBar bar = getSupportActionBar();
//		 bar.setBackgroundDrawable(getResources().getDrawable(R.drawable.photo1));
		bar.hide();
		initTopBarForLeft("群信息");
		mGridView.setOnItemClickListener(mOnItemClickListener);
		mGridView.setAdapter(mAdapter);
		mAdapter.setLocalUserName(localBarJid);
		mAdapter.setOnDelMemberListenr(this);

		trQun.setVisibility(View.VISIBLE);
		tvQun.setText(remoteDisplayName);
		btnQuitQun.setVisibility(View.VISIBLE);

		mGroupJid = remoteUserName;
		if (remoteUserName.contains("/")) {
			mGroupJid = remoteUserName.substring(0,
					remoteUserName.lastIndexOf("/"));
		}
		getQunMembersDoInBackground(true);
		
		MyApplication.getInstance().addActivity(this);
	}
	
	@Override
	public boolean onSupportNavigateUp() {
		finish();
		return true;
	}

	@Background(delay=100 ,id ="getQunMembersDoInBackground")
	void getQunMembersDoInBackground(boolean isShowProgressBar) {
		if(isShowProgressBar)
			onPreExecute();
		
		Group group = null;
		
		try {
			gService = XmppManager.getInstance().getGroupService(OpenfireConstDefine.OPENFIRE_SERVER_NAME);
			group = gService.getGroup(mGroupJid);
		} catch (Exception e) {
			e.printStackTrace();
			getQunMembersOnPostExecute(null);
		}

		getQunMembersOnPostExecute(group);
	}
	@Override
	protected void onPause() {
		super.onPause();
		BackgroundExecutor.cancelAll("getQunMembersDoInBackground", true);
	}

	@UiThread
	void getQunMembersOnPostExecute(Group group) {
		L.d(TAG, "getQunMembersOnPostExecute() response:" + group);

		dismissProgressDialog();

		if (group == null) {
			Toast.makeText(this, "操作失败", Toast.LENGTH_SHORT).show();
			return;
		}

		try {
			List<MemberInfo> members = new ArrayList<MemberInfo>();
			MemberInfo member;
			for (DataForm.Item item : group.getMembers().getItems()) {
				HashMap<String, String> rows = mapFields(item);
				/*
				 * if (rows.get("username").equalsIgnoreCase(user.getUserName())
				 * && rows.get("nickname").equalsIgnoreCase(user.getNickname()))
				 * { }
				 */
				member = new MemberInfo(rows.get("username"),
						rows.get("nickname"));
				members.add(member);
			}

			if (members.size() == 0) {
				Toast.makeText(this, "当前群组无成员！", Toast.LENGTH_SHORT).show();
				return;
			}

			Form actualForm = new Form(group.getInfo());
			// 不包含Jid的
			mOwner = actualForm.getField("owner").getValues().get(0);
			mAdapter.setShowAdd(true);
			mAdapter.setShowMinus(MyApplication.getInstance().getOpenfireJid().contains(mOwner));

			changeData(members);

			remoteDisplayName = actualForm.getField("name").getValues().get(0);
			tvQun.setText(remoteDisplayName);

		} catch (Exception e) {
			e.printStackTrace();
			Toast.makeText(this, "访问失败！", Toast.LENGTH_SHORT).show();
		}
	}

	private static HashMap<String, String> mapFields(DataForm.Item item) {
		HashMap<String, String> maps = new HashMap<String, String>(item
				.getFields().size());
		for (FormField field : item.getFields()) {
			maps.put(field.getVariable(), field.getValues().get(0));
		}
		return maps;
	}

	private void changeData(List<MemberInfo> memberList) {
		Collections.sort(memberList, new Comparator<MemberInfo>() {

			@Override
			public int compare(MemberInfo lhs, MemberInfo rhs) {
				
				if (lhs.getUserName().equals(localBarJid)) {
					return -1;
				} else if (rhs.getUserName().equals(localBarJid)) {
					return 1;
				}
				return 0;
			}
		});
		mAdapter.changeData(memberList);
	}

	private ProgressDialog mProgressDialog;

	@UiThread
	void onPreExecute() {
		mProgressDialog = ProgressDialog.show(this, "提示", "正在操作...");
	}
	
	@Override
	protected void onDestroy() {
		
		if(mProgressDialog!=null){
			mProgressDialog.dismiss();
		}
		MyApplication.getInstance().removeActivity(this);
		super.onDestroy();
	}

	private void dismissProgressDialog() {
		if (mProgressDialog != null && mProgressDialog.isShowing()) {
			mProgressDialog.dismiss();
		}
	}

	@UiThread
	@Override
	public void onRestClientExceptionThrown(NestedRuntimeException e) {
		dismissProgressDialog();
		Toast.makeText(this, "访问失败", Toast.LENGTH_SHORT).show();
	}

	private OnItemClickListener mOnItemClickListener = new OnItemClickListener() {

		@Override
		public void onItemClick(AdapterView<?> parent, View view, int position,
				long id) {
			// TODO paas 和openfire用户数据的不对对应 ,现在做不了！
//			member.UserName 和 jid(邮箱前半段)对应
			String username = MyApplication.getInstance().getLocalUserName();
			Member member = MyApplication.getInstance().getLocalMember();
			List<Member> members = new ArrayList<Member>();
			members.add(member);
			if (!mAdapter.isPositionAdd(position)
					&& !mAdapter.isPositionMinus(position)) {
//				MemberInfo memberInfo = (MemberInfo) parent.getItemAtPosition(position);
//				ContactDetailActivity_.intent(XChatDetailActivity.this)
//						.userName(username).member(member).start();
				MemberInfo memberInfo = (MemberInfo) parent.getItemAtPosition(position);
				String bareUsername = memberInfo.getUserName();

                bareUsername = bareUsername.concat("@user");
                ContactDetailActivity_.intent(XChatDetailActivity.this)
                        .userName(bareUsername).member(null).fromWhere(ContactDetailActivity.FROM_WHERE_IS_GROUP_CHAT_DETAIL)
                        .start();

            } else if (mAdapter.isPositionAdd(position)) {
				// TODO: 2016/3/2  
				/*ContactSelectActivity_.intent(XChatDetailActivity.this)
						.isPickMode(true).lockMembers(members)
						.startForResult(REQUESTCODE_PICK);*/
				ComponentName component = new ComponentName(
						XChatDetailActivity.this, ContactSelectActivity_.class);
				Intent intent = new Intent();
				//设置Intent的Component属性
				intent.setComponent(component);
				ObjectMapper mapper = new ObjectMapper();
				//设置参数
				try {
					intent.putExtra("lockMembers", mapper.writeValueAsString(members));
					intent.putExtra("localUserName", username);
					intent.putExtra("isPickMode", true);
					
				} catch (JsonProcessingException e) {
					e.printStackTrace();
				}
				//启动SecondActivity
				startActivityForResult(intent,REQUESTCODE_PICK);
			} else if (mAdapter.isPositionMinus(position)) {
				mAdapter.setDelMode(!mAdapter.isDelMode());
			}

		}
	};

	public static final int REQUESTCODE_PICK = 1;

	@OnActivityResult(REQUESTCODE_PICK)
	void onActivityResult(int resultCode, Intent data) {
		switch (resultCode) {
			case RESULT_OK:
				@SuppressWarnings("unchecked")
				List<Member> members = (List<Member>) data
						.getSerializableExtra("members");
				Log.d(TAG, "members:" + members);
				addQunMemberDoInBackground(members);
				break;
	
			default:
				break;
		}
	}

	@Background
	void addQunMemberDoInBackground(List<Member> members) {
		onPreExecute();
		try {
			Group group = gService.getGroup(mGroupJid);
//         TODO 用到了邮箱
			for (Member member : members) {
				String userName = member.Uid;
				group.inviteToJoin(userName, member.NickName);
				L.d(TAG, "inivte :" + userName);
			}
		} catch (Exception e) {
			e.printStackTrace();
			addQunMemberOnPostExecute(false);
		}

		addQunMemberOnPostExecute(true);
	}

	@UiThread
	void addQunMemberOnPostExecute(boolean result) {
		dismissProgressDialog();
		Toast.makeText(this, result ? "操作成功" : "操作失败", Toast.LENGTH_SHORT)
				.show();
	}

	@Click(R.id.trQun)
	void onClickTrQun(View v) {
		
		if (mOwner.equals(localBarJid)) {
			ReTopicQunDialogFragment f = ReTopicQunDialogFragment_.builder()
					.topic(remoteDisplayName).type(ReTopicQunDialogFragment.TYPE_UPDATE).build();
			f.setOnTopicChangeListener(mOnTopicChangeListener);
			f.show(getSupportFragmentManager(),
					ReTopicQunDialogFragment.class.getName());
		}else{
			Toast.makeText(XChatDetailActivity.this, "请联系群主进行该项操作！", Toast.LENGTH_SHORT).show();
		}
	}

	@Click(R.id.btnQuitQun)
	void onClickBtnQuitQun() {
		if (!mOwner.equals(localBarJid)) {
			doInBackgroundQuitQun();
		} else {
			doInBackgroundDestroyQun();
		}
	}
	
	@Click(R.id.btnSenMsg2Group)
	void onClickbtnSenMsg2Group(){
		if(fromWhere == FROM_GROUP_LIST_ACTIVITY){
			XchatActivity_.intent(this).remoteUserName(mGroupJid)
				.remoteUserNick(remoteDisplayName)
					.chatType(MsgInFo.TYPE_GROUPCHAT).start();
		}
		finish();
	}

	//管理员删除群
	@Background
	void doInBackgroundDestroyQun() {
		onPreExecute();
		try {
			Group group = gService.getGroup(mGroupJid);
			group.destroy(getResources().getString(R.string.group_operate_tips_destory));
			onPostExecuteQuitQun(true,XChatDetailActivity.ACTOIN_DESTROY);
		} catch (Exception e) { 
			e.printStackTrace();
			onPostExecuteQuitQun(false,XChatDetailActivity.ACTOIN_DESTROY);
		}
	}
	
	// TODO 退出群
	@Background
	void doInBackgroundQuitQun() {
		onPreExecute();
		try {
			Group group = gService.getGroup(mGroupJid);
			group.exit(getResources().getString(R.string.group_operate_tips_exit));
			onPostExecuteQuitQun(true,XChatDetailActivity.ACTOIN_EXITE);
		} catch (Exception e) { 
			e.printStackTrace();
			onPostExecuteQuitQun(false,XChatDetailActivity.ACTOIN_EXITE);
		}
	}

	@UiThread
	void onPostExecuteQuitQun(boolean result, int actionType) {
		Log.d(TAG, "onPostExecuteQuitQun() ");
		dismissProgressDialog();

		if (!result) {
			Toast.makeText(XChatDetailActivity.this, "操作失败", Toast.LENGTH_SHORT).show();
		}
        // TODO: 2016/3/13 因为自己加入的群数据被缓存了
        ACache.get(this).remove(GroupListActivity.CACHE_KEY);
        XmppDbManager.getInstance(this).deleteChat(localBarJid,remoteUserName);
		setResult(RESULT_OK);
		finish();
		
	}

	private ReTopicQunDialogFragment.OnTopicChangeListener mOnTopicChangeListener = new ReTopicQunDialogFragment.OnTopicChangeListener() {

		@Override
		public void onTopicChange(String topic) {
			updateQunTopicDoInBackground(topic);
		}
	};

	@Background
	void updateQunTopicDoInBackground(String topic) {
		onPreExecute();

		GroupService  gService = XmppManager.getInstance().getGroupService(OpenfireConstDefine.OPENFIRE_SERVER_NAME);
		Group group = gService.getGroup(mGroupJid);
		
		try {
			Form form = new Form(group.getInfo());
			
			DataForm updateForm = new DataForm(Type.submit);
	
	        FormField field = new FormField("name");
	        updateForm.addField(field);
	        field.addValue(topic);
	
	        field = new FormField("subject");
	        updateForm.addField(field);
	        field.addValue(form.getField("subject").getValues().get(0));
	
	        field = new FormField("description");
	        updateForm.addField(field);
	        field.addValue(form.getField("description").getValues().get(0));
	
	        field = new FormField("category");
	        updateForm.addField(field);
	        field.addValue(form.getField("category").getValues().get(0));
	
	        field = new FormField("openness");
	        updateForm.addField(field);
	        field.addValue(form.getField("openness").getValues().get(0));
		
		
			group.updateInfo(updateForm);
			//TODO 更新 groupName
			XmppDbManager.getInstance(this).updateQunTopic(remoteUserName, topic);
			
		} catch (Exception e) {
			e.printStackTrace();
			updateQunTopicOnPostExecute(false, topic);
		} 
		updateQunTopicOnPostExecute(true, topic);
		
	}

	@UiThread
	void updateQunTopicOnPostExecute(boolean result,
			String topic) {
		Log.d(TAG, "updateQunTopicOnPostExecute() response:" + topic);

		dismissProgressDialog();

		if (!result) {
			Toast.makeText(XChatDetailActivity.this, "操作失败", Toast.LENGTH_SHORT).show();
			return ;
		}

		tvQun.setText(topic);

		remoteDisplayName = topic;

	}

	@Override
	public void onDelMember(MemberInfo member) {
		delMemberDoInBackground(member);
	}

	@Background
	void delMemberDoInBackground(MemberInfo member) {
		 onPreExecute();
		 
		 try {
			 GroupService  gService = XmppManager.getInstance().getGroupService(OpenfireConstDefine.OPENFIRE_SERVER_NAME);
			 Group group = gService.getGroup(mGroupJid);
			 group.kick(member.getUserName(), "群管理员踢人！");
		} catch (Exception e) {
			e.printStackTrace();
			delQunMemberOnPostExecute(false);
		} 
			
		delQunMemberOnPostExecute(true);
		 
	}

	@UiThread
	void delQunMemberOnPostExecute(boolean result) {
		Log.d(TAG, "delQunMemberOnPostExecute() response:" + result);

		dismissProgressDialog();

		if (result) {
			getQunMembersDoInBackground(false);
			
			Toast.makeText(this, "操作成功",
					Toast.LENGTH_SHORT).show();
		}else{
			Toast.makeText(this, "操作失败",
					Toast.LENGTH_SHORT).show();
		}
		// changeData(response.memberList);
	}
}
