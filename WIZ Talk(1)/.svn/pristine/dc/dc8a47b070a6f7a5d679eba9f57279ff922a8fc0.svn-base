//
// DO NOT EDIT THIS FILE.Generated using AndroidAnnotations 3.3.1.
//  You can create a larger work that contains this file and distribute that work under terms of your choice.
//


package com.yxst.epic.unifyplatform.activity;

import java.io.Serializable;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.support.v4.app.ActivityCompat;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import com.yxst.epic.unifyplatform.DB.Member;
import com.yxst.epic.unifyplatform.R.dimen;
import com.yxst.epic.unifyplatform.R.id;
import com.yxst.epic.unifyplatform.R.layout;
import com.yxst.epic.unifyplatform.dto.request.GetMemberResponse;
import com.yxst.epic.unifyplatform.dto.response.AddOrRemoveContactResponse;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.SdkVersionHelper;
import org.androidannotations.api.builder.ActivityIntentBuilder;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;
import org.springframework.core.NestedRuntimeException;

public final class ContactDetailActivity_
    extends ContactDetailActivity
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    public final static String USER_NAME_EXTRA = "userName";
    public final static String MEMBER_EXTRA = "Member";
    public final static String FROM_WHERE_EXTRA = "fromWhere";
    private Handler handler_ = new Handler(Looper.getMainLooper());

    @java.lang.Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
        setContentView(layout.activity_contact_detail_2);
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        Resources resources_ = this.getResources();
        biggerSize = resources_.getDimensionPixelOffset(dimen.icon_size_bigger);
        injectExtras_();
        afterInject();
    }

    @java.lang.Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @java.lang.Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @java.lang.Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static ContactDetailActivity_.IntentBuilder_ intent(Context context) {
        return new ContactDetailActivity_.IntentBuilder_(context);
    }

    public static ContactDetailActivity_.IntentBuilder_ intent(android.app.Fragment fragment) {
        return new ContactDetailActivity_.IntentBuilder_(fragment);
    }

    public static ContactDetailActivity_.IntentBuilder_ intent(android.support.v4.app.Fragment supportFragment) {
        return new ContactDetailActivity_.IntentBuilder_(supportFragment);
    }

    @java.lang.Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (((SdkVersionHelper.getSdkInt()< 5)&&(keyCode == KeyEvent.KEYCODE_BACK))&&(event.getRepeatCount() == 0)) {
            onBackPressed();
        }
        return super.onKeyDown(keyCode, event);
    }

    @java.lang.Override
    public void onViewChanged(HasViews hasViews) {
        tvName = ((TextView) hasViews.findViewById(id.tvName));
        ivStar = ((ImageView) hasViews.findViewById(id.ivStar));
        tvTel = ((TextView) hasViews.findViewById(id.tvTel));
        ivAvatar = ((ImageView) hasViews.findViewById(id.ivAvatar));
        tvMobile = ((TextView) hasViews.findViewById(id.tvMobile));
        tvNickName = ((TextView) hasViews.findViewById(id.tvNickName));
        btnSendMsg = ((Button) hasViews.findViewById(id.btnSendMsg));
        if (btnSendMsg!= null) {
            btnSendMsg.setOnClickListener(new OnClickListener() {


                @java.lang.Override
                public void onClick(View view) {
                    ContactDetailActivity_.this.onClickBtnSendMsg(view);
                }

            }
            );
        }
        if (ivStar!= null) {
            ivStar.setOnClickListener(new OnClickListener() {


                @java.lang.Override
                public void onClick(View view) {
                    ContactDetailActivity_.this.onAddContact(view);
                }

            }
            );
        }
        {
            View view = hasViews.findViewById(id.layoutTel);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @java.lang.Override
                    public void onClick(View view) {
                        ContactDetailActivity_.this.onClickTel(view);
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.layoutMobile);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @java.lang.Override
                    public void onClick(View view) {
                        ContactDetailActivity_.this.onClickMobile(view);
                    }

                }
                );
            }
        }
        afterViews();
    }

    private void injectExtras_() {
        Bundle extras_ = getIntent().getExtras();
        if (extras_!= null) {
            if (extras_.containsKey(USER_NAME_EXTRA)) {
                userName = extras_.getString(USER_NAME_EXTRA);
            }
            if (extras_.containsKey(MEMBER_EXTRA)) {
                member = ((Member) extras_.getSerializable(MEMBER_EXTRA));
            }
            if (extras_.containsKey(FROM_WHERE_EXTRA)) {
                fromWhere = ((Integer) extras_.getSerializable(FROM_WHERE_EXTRA));
            }
        }
    }

    @java.lang.Override
    public void setIntent(Intent newIntent) {
        super.setIntent(newIntent);
        injectExtras_();
    }

    @java.lang.Override
    public void onRestClientExceptionThrown(final NestedRuntimeException e) {
        handler_.post(new Runnable() {


            @java.lang.Override
            public void run() {
                ContactDetailActivity_.super.onRestClientExceptionThrown(e);
            }

        }
        );
    }

    @java.lang.Override
    public void addOrRemoveContactOnPostExecute(final AddOrRemoveContactResponse response) {
        handler_.post(new Runnable() {


            @java.lang.Override
            public void run() {
                ContactDetailActivity_.super.addOrRemoveContactOnPostExecute(response);
            }

        }
        );
    }

    @java.lang.Override
    public void getMemberOnPostExecute(final GetMemberResponse response) {
        handler_.post(new Runnable() {


            @java.lang.Override
            public void run() {
                ContactDetailActivity_.super.getMemberOnPostExecute(response);
            }

        }
        );
    }

    @java.lang.Override
    public void addOrRemoveContactDoInBackground() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @java.lang.Override
            public void execute() {
                try {
                    ContactDetailActivity_.super.addOrRemoveContactDoInBackground();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @java.lang.Override
    public void getMemberDoInBackground() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @java.lang.Override
            public void execute() {
                try {
                    ContactDetailActivity_.super.getMemberDoInBackground();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    public static class IntentBuilder_
        extends ActivityIntentBuilder<ContactDetailActivity_.IntentBuilder_>
    {

        private android.app.Fragment fragment_;
        private android.support.v4.app.Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            super(context, ContactDetailActivity_.class);
        }

        public IntentBuilder_(android.app.Fragment fragment) {
            super(fragment.getActivity(), ContactDetailActivity_.class);
            fragment_ = fragment;
        }

        public IntentBuilder_(android.support.v4.app.Fragment fragment) {
            super(fragment.getActivity(), ContactDetailActivity_.class);
            fragmentSupport_ = fragment;
        }

        @java.lang.Override
        public void startForResult(int requestCode) {
            if (fragmentSupport_!= null) {
                fragmentSupport_.startActivityForResult(intent, requestCode);
            } else {
                if (fragment_!= null) {
                    fragment_.startActivityForResult(intent, requestCode, lastOptions);
                } else {
                    if (context instanceof Activity) {
                        Activity activity = ((Activity) context);
                        ActivityCompat.startActivityForResult(activity, intent, requestCode, lastOptions);
                    } else {
                        context.startActivity(intent, lastOptions);
                    }
                }
            }
        }

        public ContactDetailActivity_.IntentBuilder_ userName(String userName) {
            return super.extra(USER_NAME_EXTRA, userName);
        }

        public ContactDetailActivity_.IntentBuilder_ member(Member member) {
            return super.extra(MEMBER_EXTRA, ((Serializable) member));
        }

        public ContactDetailActivity_.IntentBuilder_ fromWhere(Integer fromWhere) {
            return super.extra(FROM_WHERE_EXTRA, ((Serializable) fromWhere));
        }

    }

}
