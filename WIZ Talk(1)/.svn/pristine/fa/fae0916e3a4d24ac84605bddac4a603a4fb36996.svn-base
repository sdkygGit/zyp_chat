package com.yxst.epic.unifyplatform.fragment;

import android.app.Activity;
import android.app.ProgressDialog;
import android.app.SearchManager;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.Toast;

import com.epic.traverse.push.util.L;
import zbar.CaptureActivity;
import com.google.zxing.client.android.Intents;
import com.yxst.epic.unifyplatform.R;
import com.yxst.epic.unifyplatform.activity.AppsActivity_;
import com.yxst.epic.unifyplatform.activity.ContactDetailActivity_;
import com.yxst.epic.unifyplatform.adapter.FindAdapter2;
import com.yxst.epic.unifyplatform.dto.request.BaseRequest;
import com.yxst.epic.unifyplatform.dto.request.CheckUpdateRequest;
import com.yxst.epic.unifyplatform.dto.response.BaseResponse;
import com.yxst.epic.unifyplatform.dto.response.CheckUpdateResponse;
import com.yxst.epic.unifyplatform.rest.Appmsgsrv8094;
import com.yxst.epic.unifyplatform.rest.Appmsgsrv8094Proxy;
import com.yxst.epic.unifyplatform.utils.CacheUtils;
import com.yxst.epic.unifyplatform.utils.Utils;

import org.androidannotations.annotations.AfterViews;
import org.androidannotations.annotations.Background;
import org.androidannotations.annotations.EFragment;
import org.androidannotations.annotations.FragmentArg;
import org.androidannotations.annotations.UiThread;
import org.androidannotations.annotations.ViewById;
import org.androidannotations.api.rest.RestErrorHandler;
import org.springframework.core.NestedRuntimeException;

@EFragment(R.layout.fragment_find)
public class FindFragment extends FragmentBase implements IMainFragment,RestErrorHandler {

	protected static final String TAG = "FindFragment";
    
    @ViewById(android.R.id.list)
	ListView mPinnedHeaderListView;
    
	private FindAdapter2 mSectionedBaseAdapter;

	/**
	 * 调二维码扫描CODE
	 */
	private static final int CAPTURE_REQUEST_CODE = 200;

	@FragmentArg
	String localUserName;

    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        L.d(TAG, "onActivityCreated()");
        super.onActivityCreated(savedInstanceState);
    }
    
    @AfterViews
    public void afterViews(){
        initTopBarForOnlyTitle("发现");

        mPinnedHeaderListView.setOnItemClickListener(mOnItemClickListener);
        mSectionedBaseAdapter = new FindAdapter2(getActivity());
        mPinnedHeaderListView.setAdapter(mSectionedBaseAdapter);
    }
	// private void initHeaderView() {
	// for (int i = 0; i < FakeData.FINDS.length; i++) {
	// ContactItemView view = new ContactItemView(getActivity());
	// view.mIconIV.setImageResource(FakeData.FIND_DRAWABLES[i]);
	// view.mNameTV.setText(FakeData.FINDS[i]);
	// mPinnedHeaderListView.addHeaderView(view);
	// }
	// }

	private ListView.OnItemClickListener mOnItemClickListener = new ListView.OnItemClickListener() {

		@Override
		public void onItemClick(AdapterView<?> parent, View view, int position,
				long id) {
			switch (position) {
			case 0:
				callCapture();
				break;
			case 1:
				AppsActivity_.intent(getActivity()).localUserName(localUserName).start();
				break;
			case 2:
				checkUpdateDoInBackground();
				break;
			default:
				break;
			}
		}

	};

	@Override
	public void onTagChanged() {
	}

	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {

		if (null != data && requestCode == CAPTURE_REQUEST_CODE) {
			switch (resultCode) {
			case Activity.RESULT_OK:
				doCaptureResult(data);
				break;
			default:
				break;
			}
		}
	}
	/**
	 * 调二维码扫描
	 */
	private void callCapture() {
		Intent intent = new Intent();
		intent.setAction(Intents.Scan.ACTION);
		intent.putExtra(Intents.Scan.CHARACTER_SET, "UTF-8");
		intent.putExtra(Intents.Scan.WIDTH, 600);
		intent.putExtra(Intents.Scan.HEIGHT, 400);
		intent.setClass(this.getActivity(), CaptureActivity.class);
		startActivityForResult(intent, CAPTURE_REQUEST_CODE);
	}

	/**
	 * 对扫描结果进行处理
	 * 
	 * @param data
	 *            Intent
	 */
	private void doCaptureResult(Intent data) {
		String captureText = data.getStringExtra(Intents.Scan.RESULT);
		if (captureText == null || captureText.length() == 0) {
			Utils.showToastShort(getActivity(), "无效的二维码");
			return;
		}
//		if (captureText.startsWith(UserInfoActivity.UserCardUrl)) {
		if (captureText.contains("/app/user/erweima")) {
			String userName = captureText.substring(captureText
					.lastIndexOf("=") + 1);
			ContactDetailActivity_.intent(getActivity()).userName(userName)
					.start();
		} else {
//			data.setClass(this.getActivity(), CaptureResultActivity.class);
//			startActivity(data);
			
				Uri uri = Uri.parse(captureText);
				Log.d(TAG, "uri.getHost():" + uri.getHost());
				Log.d(TAG, "uri.getScheme():" + uri.getScheme());
				
				String scheme = uri.getScheme();
				
				if (scheme == null) {
					Intent intent = new Intent(Intent.ACTION_WEB_SEARCH);
					intent.putExtra(SearchManager.QUERY, captureText);
					try {
						startActivity(intent);
					} catch (Exception e) {
						e.printStackTrace();
					}
				} else {
					Intent intent = new Intent(Intent.ACTION_VIEW);
					intent.setData(uri);
					try {
						startActivity(intent);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
		}
	}
	
	// private PinnedHeaderListView.OnItemClickListener mOnItemClickListener =
	// new PinnedHeaderListView.OnItemClickListener() {
	//
	// @Override
	// public void onItemClick(AdapterView<?> adapterView, View view,
	// int section, int position, long id) {
	// Log.d(TAG, "onItemClick() section:" + section);
	// Log.d(TAG, "onItemClick() position:" + position);
	// AppDetailActivity.actionAppDetail(getActivity());
	// }
	//
	// @Override
	// public void onSectionClick(AdapterView<?> adapterView, View view,
	// int section, long id) {
	// Log.d(TAG, "onSectionClick() section:" + section);
	// } 
	//
	// @Override
	// public void onHeaderViewClick(AdapterView<?> adapterView, View view,
	// int position) {
	// Log.d(TAG, "onHeaderViewClick() position:" + position);
	// }
	//
	// @Override
	// public void onFooterViewClick(AdapterView<?> adapterView, View view,
	// int position) {
	// Log.d(TAG, "onFooterViewClick() position:" + position);
	// }
	//
	// };

	// @Override
	// public Animation onCreateAnimation(int transit, boolean enter, int
	// nextAnim) {
	// Log.d(TAG, "onCreateAnimation() transit:" + transit);
	// Log.d(TAG, "onCreateAnimation() transit:" + enter);
	// Log.d(TAG, "onCreateAnimation() transit:" + nextAnim);
	// return super.onCreateAnimation(transit, enter, nextAnim);
	// }
	
	// ==========
	
	@Background
	void checkUpdateDoInBackground() {
		checkUpdateOnPreExecute();

		BaseRequest baseRequest = CacheUtils.getBaseRequest(getActivity());
		CheckUpdateRequest request = new CheckUpdateRequest();
		request.BaseRequest = baseRequest;
		request.VersionCode = Utils.getVersionCode(getActivity());
		request.VersionName = Utils.getVersionName(getActivity());

		Log.d(TAG, "checkUpdateDoInBackground() request:" + request);

		Appmsgsrv8094 mIMInterfaceProxy = Appmsgsrv8094Proxy.create();
		mIMInterfaceProxy.setRestErrorHandler(this);
		
		CheckUpdateResponse response = mIMInterfaceProxy.checkUpdate(request);

		checkUpdateOnPostExecute(response);
	}

	private ProgressDialog mProgressDialog;

	@UiThread
	void checkUpdateOnPreExecute() {
		mProgressDialog = ProgressDialog.show(getActivity(), "提示", "检查更新");
	}

	private void dismissProgressDialog() {
		if (mProgressDialog != null && mProgressDialog.isShowing()) {
			mProgressDialog.dismiss();
		}
	}
	
	@UiThread
	void checkUpdateOnPostExecute(CheckUpdateResponse response) {
		Log.d(TAG, "checkUpdateOnPostExecute() response:" + response);
		
		dismissProgressDialog();
		
		if (response == null) {
			return;
		}

		if (response.BaseResponse.Ret != BaseResponse.RET_SUCCESS) {
			Toast.makeText(getActivity(), "检查更新失败",
					Toast.LENGTH_SHORT).show();
			return;
		}

		/*if (response.isUpdate) {
			UpdateDialogFragment f = UpdateDialogFragment_.builder()
					.msg(response.Msg).build();
//		f.setUpdateDialogListener(mUpdateDialogListener);
			f.show(getFragmentManager(), "update");
			
//		UpdateEnableActivity_.intent(getActivity())
//		.flags(Intent.FLAG_ACTIVITY_NEW_TASK).msg(response.Msg).start();
		} else {
			Utils.showToastShort(getActivity(), "您已经是最新版本！");
		}*/
		
	}
	
	@UiThread
	@Override
	public void onRestClientExceptionThrown(NestedRuntimeException e) {
		dismissProgressDialog();
		Toast.makeText(getActivity(), "访问失败", Toast.LENGTH_SHORT).show();
	}

}
